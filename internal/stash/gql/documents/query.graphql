query Version{
    version {
        version
    }
}

query UIConfiguration{
    configuration{
        ui
    }
}

query FindCredentials{
    configuration {
        general {
            username, password
        }
    }
}

query FindSavedSceneFilters{
    findSavedFilters(mode: SCENES){
        ...SavedFilterParts
    }
}

query FindSavedFilter($id: ID!){
    findSavedFilter(id: $id){
        ...SavedFilterParts
    }
}

query FindAllNonEmptyTags{
    findTags(tag_filter: {scene_count: {modifier: GREATER_THAN, value: 1}}){
        tags {
            ...TagParts
            scene_count
        }}
}

query FindTags(
    $tag_filter: TagFilterType, $sort: String, $direction: SortDirectionEnum){
    findTags(tag_filter: $tag_filter, filter: {sort: $sort, direction: $direction, per_page: -1}){
        tags {
            ...TagParts
            scene_count
        }}
}

query FindTagByName($name: String!){
    findTags(tag_filter: {name: {value: $name, modifier: EQUALS}}){tags {
        id
    }}
}

query FindStudioByName($name: String!){
    findStudios(studio_filter: {name: {value: $name, modifier: EQUALS}}){studios {
        id
    }}
}

query FindPerformerByName($name: String!){
    findPerformers(performer_filter: {name: {value: $name, modifier: EQUALS}}){performers {
        id
    }}
}

# @genqlient(for: "SceneFilterType.has_markers", omitempty: true)
# @genqlient(for: "SceneFilterType.interactive", omitempty: true)
# @genqlient(for: "SceneFilterType.is_missing", omitempty: true)
# @genqlient(for: "SceneFilterType.organized", omitempty: true)
# @genqlient(for: "SceneFilterType.performer_favorite", omitempty: true)
query FindScenePreviewsByFilter(
    $scene_filter: SceneFilterType, $filterOpts: FindFilterType){
    findScenes(scene_filter: $scene_filter, filter: $filterOpts){
        scenes {
            ...ScenePreviewParts
        }}
}

query FindScenePreviewsByIds($scene_ids:[Int!]){
    findScenes(scene_ids: $scene_ids, filter: {per_page: -1}){
        scenes {
            ...ScenePreviewParts
        }}
}

query FindSceneScansByIds($scene_ids:[Int!]){
    findScenes(scene_ids: $scene_ids){
        scenes {
            ...SceneScanParts
        }
    }
}

query FindAllScenePreviews{findScenes(filter: {per_page: -1}){
    scenes {
        ...ScenePreviewParts
    }}
}

query FindScenePreviewsByTags($tags: [ID!]){
    findScenes(scene_filter: {tags: {modifier: INCLUDES, value: $tags}}, filter: {per_page: -1}){
        scenes {
            ...ScenePreviewParts, tags {
                ...TagParts
            }
        }}
}

query FindSceneFull($id: ID){
    findScene(id:$id){
        ...SceneFullParts
    }
}

query FindSceneMarkers($scene_id: ID!){
    sceneMarkerTags(scene_id: $scene_id){
        scene_markers{id, primary_tag{name}, title}
    }
}

query FindSceneTags($scene_id: ID!){
    findScene(id:$scene_id){
        ...TagPartsArray
    }
}

query IsSceneOrganized($id: ID){
    findScene(id:$id){
        organized
    }
}

query FindScriptDataBySceneId($id: ID!){
    findScene(id:$id){
        ...ScriptParts
    }
}

fragment SavedFilterParts on SavedFilter{
    id, name, mode, find_filter {sort, direction}, object_filter
}

fragment ScenePreviewParts on Scene{
    id title date files{basename duration} paths {screenshot}
}

fragment SceneFullParts on Scene{
    ...SceneScanParts
    details,
    paths{screenshot, preview, caption},
    ...ScriptParts
    ...StreamsParts
}

fragment SceneScanParts on Scene{
    id, title, rating100, created_at, date
    captions{
        caption_type, language_code
    }
    files{
        basename, duration
    }
    ...TagPartsArray
    studio{
        id, name, rating100
    },
    scene_markers {
        id, seconds, title, primary_tag {
            id, name
        }
    },
    performers {
        id, name, rating100
    },
    movies {
        scene_index,
        movie {
            name
        }
    },
    play_count,
    o_counter,
    organized
}

fragment TagPartsArray on Scene{
    tags {
        ...TagParts
    }
}

fragment TagParts on Tag{
    id,name
}


fragment StreamsParts on Scene{
    paths {stream}
    files{path,video_codec,height}
    sceneStreams{url, mime_type, label}
}

fragment ScriptParts on Scene{
    interactive
    interactive_speed
    paths {
        funscript
        screenshot
        interactive_heatmap
    }
}
