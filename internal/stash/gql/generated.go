// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type CircumcisionCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    []CircumisedEnum  `json:"value"`
}

// GetModifier returns CircumcisionCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *CircumcisionCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns CircumcisionCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *CircumcisionCriterionInput) GetValue() []CircumisedEnum { return v.Value }

type CircumisedEnum string

const (
	CircumisedEnumCut   CircumisedEnum = "CUT"
	CircumisedEnumUncut CircumisedEnum = "UNCUT"
)

var AllCircumisedEnum = []CircumisedEnum{
	CircumisedEnumCut,
	CircumisedEnumUncut,
}

type CriterionModifier string

const (
	// >= AND <=
	CriterionModifierBetween CriterionModifier = "BETWEEN"
	// =
	CriterionModifierEquals   CriterionModifier = "EQUALS"
	CriterionModifierExcludes CriterionModifier = "EXCLUDES"
	// >
	CriterionModifierGreaterThan CriterionModifier = "GREATER_THAN"
	CriterionModifierIncludes    CriterionModifier = "INCLUDES"
	// INCLUDES ALL
	CriterionModifierIncludesAll CriterionModifier = "INCLUDES_ALL"
	// IS NULL
	CriterionModifierIsNull CriterionModifier = "IS_NULL"
	// <
	CriterionModifierLessThan CriterionModifier = "LESS_THAN"
	// MATCHES REGEX
	CriterionModifierMatchesRegex CriterionModifier = "MATCHES_REGEX"
	// < OR >
	CriterionModifierNotBetween CriterionModifier = "NOT_BETWEEN"
	// !=
	CriterionModifierNotEquals CriterionModifier = "NOT_EQUALS"
	// NOT MATCHES REGEX
	CriterionModifierNotMatchesRegex CriterionModifier = "NOT_MATCHES_REGEX"
	// IS NOT NULL
	CriterionModifierNotNull CriterionModifier = "NOT_NULL"
)

var AllCriterionModifier = []CriterionModifier{
	CriterionModifierBetween,
	CriterionModifierEquals,
	CriterionModifierExcludes,
	CriterionModifierGreaterThan,
	CriterionModifierIncludes,
	CriterionModifierIncludesAll,
	CriterionModifierIsNull,
	CriterionModifierLessThan,
	CriterionModifierMatchesRegex,
	CriterionModifierNotBetween,
	CriterionModifierNotEquals,
	CriterionModifierNotMatchesRegex,
	CriterionModifierNotNull,
}

type CustomFieldCriterionInput struct {
	Field    string            `json:"field"`
	Modifier CriterionModifier `json:"modifier"`
	Value    []any             `json:"value"`
}

// GetField returns CustomFieldCriterionInput.Field, and is useful for accessing the field via an interface.
func (v *CustomFieldCriterionInput) GetField() string { return v.Field }

// GetModifier returns CustomFieldCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *CustomFieldCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns CustomFieldCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *CustomFieldCriterionInput) GetValue() []any { return v.Value }

type DateCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    string            `json:"value"`
	Value2   *string           `json:"value2"`
}

// GetModifier returns DateCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *DateCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns DateCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *DateCriterionInput) GetValue() string { return v.Value }

// GetValue2 returns DateCriterionInput.Value2, and is useful for accessing the field via an interface.
func (v *DateCriterionInput) GetValue2() *string { return v.Value2 }

type FilterMode string

const (
	FilterModeGalleries    FilterMode = "GALLERIES"
	FilterModeGroups       FilterMode = "GROUPS"
	FilterModeImages       FilterMode = "IMAGES"
	FilterModeMovies       FilterMode = "MOVIES"
	FilterModePerformers   FilterMode = "PERFORMERS"
	FilterModeScenes       FilterMode = "SCENES"
	FilterModeSceneMarkers FilterMode = "SCENE_MARKERS"
	FilterModeStudios      FilterMode = "STUDIOS"
	FilterModeTags         FilterMode = "TAGS"
)

var AllFilterMode = []FilterMode{
	FilterModeGalleries,
	FilterModeGroups,
	FilterModeImages,
	FilterModeMovies,
	FilterModePerformers,
	FilterModeScenes,
	FilterModeSceneMarkers,
	FilterModeStudios,
	FilterModeTags,
}

// FindAllSceneIdsFindScenesFindScenesResultType includes the requested fields of the GraphQL type FindScenesResultType.
type FindAllSceneIdsFindScenesFindScenesResultType struct {
	Scenes []*FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene `json:"scenes"`
}

// GetScenes returns FindAllSceneIdsFindScenesFindScenesResultType.Scenes, and is useful for accessing the field via an interface.
func (v *FindAllSceneIdsFindScenesFindScenesResultType) GetScenes() []*FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene {
	return v.Scenes
}

// FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene includes the requested fields of the GraphQL type Scene.
type FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene struct {
	Id string `json:"id"`
}

// GetId returns FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene.Id, and is useful for accessing the field via an interface.
func (v *FindAllSceneIdsFindScenesFindScenesResultTypeScenesScene) GetId() string { return v.Id }

// FindAllSceneIdsResponse is returned by FindAllSceneIds on success.
type FindAllSceneIdsResponse struct {
	// A function which queries Scene objects
	FindScenes *FindAllSceneIdsFindScenesFindScenesResultType `json:"findScenes"`
}

// GetFindScenes returns FindAllSceneIdsResponse.FindScenes, and is useful for accessing the field via an interface.
func (v *FindAllSceneIdsResponse) GetFindScenes() *FindAllSceneIdsFindScenesFindScenesResultType {
	return v.FindScenes
}

// FindAllTagsFindTagsFindTagsResultType includes the requested fields of the GraphQL type FindTagsResultType.
type FindAllTagsFindTagsFindTagsResultType struct {
	Tags []*FindAllTagsFindTagsFindTagsResultTypeTagsTag `json:"tags"`
}

// GetTags returns FindAllTagsFindTagsFindTagsResultType.Tags, and is useful for accessing the field via an interface.
func (v *FindAllTagsFindTagsFindTagsResultType) GetTags() []*FindAllTagsFindTagsFindTagsResultTypeTagsTag {
	return v.Tags
}

// FindAllTagsFindTagsFindTagsResultTypeTagsTag includes the requested fields of the GraphQL type Tag.
type FindAllTagsFindTagsFindTagsResultTypeTagsTag struct {
	TagParts `json:"-"`
}

// GetId returns FindAllTagsFindTagsFindTagsResultTypeTagsTag.Id, and is useful for accessing the field via an interface.
func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) GetId() string { return v.TagParts.Id }

// GetName returns FindAllTagsFindTagsFindTagsResultTypeTagsTag.Name, and is useful for accessing the field via an interface.
func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) GetName() string { return v.TagParts.Name }

// GetSort_name returns FindAllTagsFindTagsFindTagsResultTypeTagsTag.Sort_name, and is useful for accessing the field via an interface.
func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) GetSort_name() *string {
	return v.TagParts.Sort_name
}

// GetParents returns FindAllTagsFindTagsFindTagsResultTypeTagsTag.Parents, and is useful for accessing the field via an interface.
func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) GetParents() []*TagPartsParentsTag {
	return v.TagParts.Parents
}

func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindAllTagsFindTagsFindTagsResultTypeTagsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.FindAllTagsFindTagsFindTagsResultTypeTagsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindAllTagsFindTagsFindTagsResultTypeTagsTag struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Sort_name *string `json:"sort_name"`

	Parents []*TagPartsParentsTag `json:"parents"`
}

func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindAllTagsFindTagsFindTagsResultTypeTagsTag) __premarshalJSON() (*__premarshalFindAllTagsFindTagsFindTagsResultTypeTagsTag, error) {
	var retval __premarshalFindAllTagsFindTagsFindTagsResultTypeTagsTag

	retval.Id = v.TagParts.Id
	retval.Name = v.TagParts.Name
	retval.Sort_name = v.TagParts.Sort_name
	retval.Parents = v.TagParts.Parents
	return &retval, nil
}

// FindAllTagsResponse is returned by FindAllTags on success.
type FindAllTagsResponse struct {
	FindTags *FindAllTagsFindTagsFindTagsResultType `json:"findTags"`
}

// GetFindTags returns FindAllTagsResponse.FindTags, and is useful for accessing the field via an interface.
func (v *FindAllTagsResponse) GetFindTags() *FindAllTagsFindTagsFindTagsResultType { return v.FindTags }

// FindCredentialsConfigurationConfigResult includes the requested fields of the GraphQL type ConfigResult.
// The GraphQL type's documentation follows.
//
// All configuration settings
type FindCredentialsConfigurationConfigResult struct {
	General *FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult `json:"general"`
}

// GetGeneral returns FindCredentialsConfigurationConfigResult.General, and is useful for accessing the field via an interface.
func (v *FindCredentialsConfigurationConfigResult) GetGeneral() *FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult {
	return v.General
}

// FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult includes the requested fields of the GraphQL type ConfigGeneralResult.
type FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult struct {
	// Username
	Username string `json:"username"`
	// Password
	Password string `json:"password"`
}

// GetUsername returns FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult.Username, and is useful for accessing the field via an interface.
func (v *FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult) GetUsername() string {
	return v.Username
}

// GetPassword returns FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult.Password, and is useful for accessing the field via an interface.
func (v *FindCredentialsConfigurationConfigResultGeneralConfigGeneralResult) GetPassword() string {
	return v.Password
}

// FindCredentialsResponse is returned by FindCredentials on success.
type FindCredentialsResponse struct {
	// Returns the current, complete configuration
	Configuration *FindCredentialsConfigurationConfigResult `json:"configuration"`
}

// GetConfiguration returns FindCredentialsResponse.Configuration, and is useful for accessing the field via an interface.
func (v *FindCredentialsResponse) GetConfiguration() *FindCredentialsConfigurationConfigResult {
	return v.Configuration
}

type FindFilterType struct {
	Direction *SortDirectionEnum `json:"direction"`
	Page      *int               `json:"page"`
	// use per_page = -1 to indicate all results. Defaults to 25.
	Per_page *int    `json:"per_page"`
	Q        *string `json:"q"`
	Sort     *string `json:"sort"`
}

// GetDirection returns FindFilterType.Direction, and is useful for accessing the field via an interface.
func (v *FindFilterType) GetDirection() *SortDirectionEnum { return v.Direction }

// GetPage returns FindFilterType.Page, and is useful for accessing the field via an interface.
func (v *FindFilterType) GetPage() *int { return v.Page }

// GetPer_page returns FindFilterType.Per_page, and is useful for accessing the field via an interface.
func (v *FindFilterType) GetPer_page() *int { return v.Per_page }

// GetQ returns FindFilterType.Q, and is useful for accessing the field via an interface.
func (v *FindFilterType) GetQ() *string { return v.Q }

// GetSort returns FindFilterType.Sort, and is useful for accessing the field via an interface.
func (v *FindFilterType) GetSort() *string { return v.Sort }

// FindPerformerByNameFindPerformersFindPerformersResultType includes the requested fields of the GraphQL type FindPerformersResultType.
type FindPerformerByNameFindPerformersFindPerformersResultType struct {
	Performers []*FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer `json:"performers"`
}

// GetPerformers returns FindPerformerByNameFindPerformersFindPerformersResultType.Performers, and is useful for accessing the field via an interface.
func (v *FindPerformerByNameFindPerformersFindPerformersResultType) GetPerformers() []*FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer {
	return v.Performers
}

// FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer includes the requested fields of the GraphQL type Performer.
type FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer struct {
	Id string `json:"id"`
}

// GetId returns FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer.Id, and is useful for accessing the field via an interface.
func (v *FindPerformerByNameFindPerformersFindPerformersResultTypePerformersPerformer) GetId() string {
	return v.Id
}

// FindPerformerByNameResponse is returned by FindPerformerByName on success.
type FindPerformerByNameResponse struct {
	// A function which queries Performer objects
	FindPerformers *FindPerformerByNameFindPerformersFindPerformersResultType `json:"findPerformers"`
}

// GetFindPerformers returns FindPerformerByNameResponse.FindPerformers, and is useful for accessing the field via an interface.
func (v *FindPerformerByNameResponse) GetFindPerformers() *FindPerformerByNameFindPerformersFindPerformersResultType {
	return v.FindPerformers
}

// FindSavedSceneFiltersFindSavedFiltersSavedFilter includes the requested fields of the GraphQL type SavedFilter.
type FindSavedSceneFiltersFindSavedFiltersSavedFilter struct {
	SavedFilterParts `json:"-"`
}

// GetId returns FindSavedSceneFiltersFindSavedFiltersSavedFilter.Id, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) GetId() string {
	return v.SavedFilterParts.Id
}

// GetName returns FindSavedSceneFiltersFindSavedFiltersSavedFilter.Name, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) GetName() string {
	return v.SavedFilterParts.Name
}

// GetMode returns FindSavedSceneFiltersFindSavedFiltersSavedFilter.Mode, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) GetMode() FilterMode {
	return v.SavedFilterParts.Mode
}

// GetFind_filter returns FindSavedSceneFiltersFindSavedFiltersSavedFilter.Find_filter, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) GetFind_filter() *SavedFilterPartsFind_filterSavedFindFilterType {
	return v.SavedFilterParts.Find_filter
}

// GetObject_filter returns FindSavedSceneFiltersFindSavedFiltersSavedFilter.Object_filter, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) GetObject_filter() *map[string]interface{} {
	return v.SavedFilterParts.Object_filter
}

func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSavedSceneFiltersFindSavedFiltersSavedFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSavedSceneFiltersFindSavedFiltersSavedFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SavedFilterParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSavedSceneFiltersFindSavedFiltersSavedFilter struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Mode FilterMode `json:"mode"`

	Find_filter *SavedFilterPartsFind_filterSavedFindFilterType `json:"find_filter"`

	Object_filter *map[string]interface{} `json:"object_filter"`
}

func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSavedSceneFiltersFindSavedFiltersSavedFilter) __premarshalJSON() (*__premarshalFindSavedSceneFiltersFindSavedFiltersSavedFilter, error) {
	var retval __premarshalFindSavedSceneFiltersFindSavedFiltersSavedFilter

	retval.Id = v.SavedFilterParts.Id
	retval.Name = v.SavedFilterParts.Name
	retval.Mode = v.SavedFilterParts.Mode
	retval.Find_filter = v.SavedFilterParts.Find_filter
	retval.Object_filter = v.SavedFilterParts.Object_filter
	return &retval, nil
}

// FindSavedSceneFiltersResponse is returned by FindSavedSceneFilters on success.
type FindSavedSceneFiltersResponse struct {
	FindSavedFilters []*FindSavedSceneFiltersFindSavedFiltersSavedFilter `json:"findSavedFilters"`
}

// GetFindSavedFilters returns FindSavedSceneFiltersResponse.FindSavedFilters, and is useful for accessing the field via an interface.
func (v *FindSavedSceneFiltersResponse) GetFindSavedFilters() []*FindSavedSceneFiltersFindSavedFiltersSavedFilter {
	return v.FindSavedFilters
}

// FindSceneIdsByFilterFindScenesFindScenesResultType includes the requested fields of the GraphQL type FindScenesResultType.
type FindSceneIdsByFilterFindScenesFindScenesResultType struct {
	Scenes []*FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene `json:"scenes"`
}

// GetScenes returns FindSceneIdsByFilterFindScenesFindScenesResultType.Scenes, and is useful for accessing the field via an interface.
func (v *FindSceneIdsByFilterFindScenesFindScenesResultType) GetScenes() []*FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene {
	return v.Scenes
}

// FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene includes the requested fields of the GraphQL type Scene.
type FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene struct {
	Id string `json:"id"`
}

// GetId returns FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene.Id, and is useful for accessing the field via an interface.
func (v *FindSceneIdsByFilterFindScenesFindScenesResultTypeScenesScene) GetId() string { return v.Id }

// FindSceneIdsByFilterResponse is returned by FindSceneIdsByFilter on success.
type FindSceneIdsByFilterResponse struct {
	// A function which queries Scene objects
	FindScenes *FindSceneIdsByFilterFindScenesFindScenesResultType `json:"findScenes"`
}

// GetFindScenes returns FindSceneIdsByFilterResponse.FindScenes, and is useful for accessing the field via an interface.
func (v *FindSceneIdsByFilterResponse) GetFindScenes() *FindSceneIdsByFilterFindScenesFindScenesResultType {
	return v.FindScenes
}

// FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType includes the requested fields of the GraphQL type FindSceneMarkersResultType.
type FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType struct {
	Scene_markers []*FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker `json:"scene_markers"`
}

// GetScene_markers returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType.Scene_markers, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType) GetScene_markers() []*FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker {
	return v.Scene_markers
}

// FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker includes the requested fields of the GraphQL type SceneMarker.
type FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker struct {
	SceneMarkerParts `json:"-"`
}

// GetId returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker.Id, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) GetId() string {
	return v.SceneMarkerParts.Id
}

// GetSeconds returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker.Seconds, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) GetSeconds() float64 {
	return v.SceneMarkerParts.Seconds
}

// GetEnd_seconds returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker.End_seconds, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) GetEnd_seconds() *float64 {
	return v.SceneMarkerParts.End_seconds
}

// GetTitle returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker.Title, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) GetTitle() string {
	return v.SceneMarkerParts.Title
}

// GetPrimary_tag returns FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker.Primary_tag, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) GetPrimary_tag() *SceneMarkerPartsPrimary_tagTag {
	return v.SceneMarkerParts.Primary_tag
}

func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SceneMarkerParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker struct {
	Id string `json:"id"`

	Seconds float64 `json:"seconds"`

	End_seconds *float64 `json:"end_seconds"`

	Title string `json:"title"`

	Primary_tag *SceneMarkerPartsPrimary_tagTag `json:"primary_tag"`
}

func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker) __premarshalJSON() (*__premarshalFindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker, error) {
	var retval __premarshalFindSceneMarkersFindSceneMarkersFindSceneMarkersResultTypeScene_markersSceneMarker

	retval.Id = v.SceneMarkerParts.Id
	retval.Seconds = v.SceneMarkerParts.Seconds
	retval.End_seconds = v.SceneMarkerParts.End_seconds
	retval.Title = v.SceneMarkerParts.Title
	retval.Primary_tag = v.SceneMarkerParts.Primary_tag
	return &retval, nil
}

// FindSceneMarkersResponse is returned by FindSceneMarkers on success.
type FindSceneMarkersResponse struct {
	// A function which queries SceneMarker objects
	FindSceneMarkers *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType `json:"findSceneMarkers"`
}

// GetFindSceneMarkers returns FindSceneMarkersResponse.FindSceneMarkers, and is useful for accessing the field via an interface.
func (v *FindSceneMarkersResponse) GetFindSceneMarkers() *FindSceneMarkersFindSceneMarkersFindSceneMarkersResultType {
	return v.FindSceneMarkers
}

// FindSceneTagsFindScene includes the requested fields of the GraphQL type Scene.
type FindSceneTagsFindScene struct {
	TagPartsArray `json:"-"`
}

// GetTags returns FindSceneTagsFindScene.Tags, and is useful for accessing the field via an interface.
func (v *FindSceneTagsFindScene) GetTags() []*TagPartsArrayTagsTag { return v.TagPartsArray.Tags }

func (v *FindSceneTagsFindScene) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSceneTagsFindScene
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSceneTagsFindScene = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagPartsArray)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSceneTagsFindScene struct {
	Tags []*TagPartsArrayTagsTag `json:"tags"`
}

func (v *FindSceneTagsFindScene) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSceneTagsFindScene) __premarshalJSON() (*__premarshalFindSceneTagsFindScene, error) {
	var retval __premarshalFindSceneTagsFindScene

	retval.Tags = v.TagPartsArray.Tags
	return &retval, nil
}

// FindSceneTagsResponse is returned by FindSceneTags on success.
type FindSceneTagsResponse struct {
	// Find a scene by ID or Checksum
	FindScene *FindSceneTagsFindScene `json:"findScene"`
}

// GetFindScene returns FindSceneTagsResponse.FindScene, and is useful for accessing the field via an interface.
func (v *FindSceneTagsResponse) GetFindScene() *FindSceneTagsFindScene { return v.FindScene }

// FindScenesFindScenesFindScenesResultType includes the requested fields of the GraphQL type FindScenesResultType.
type FindScenesFindScenesFindScenesResultType struct {
	Scenes []*FindScenesFindScenesFindScenesResultTypeScenesScene `json:"scenes"`
}

// GetScenes returns FindScenesFindScenesFindScenesResultType.Scenes, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultType) GetScenes() []*FindScenesFindScenesFindScenesResultTypeScenesScene {
	return v.Scenes
}

// FindScenesFindScenesFindScenesResultTypeScenesScene includes the requested fields of the GraphQL type Scene.
type FindScenesFindScenesFindScenesResultTypeScenesScene struct {
	SceneParts `json:"-"`
}

// GetId returns FindScenesFindScenesFindScenesResultTypeScenesScene.Id, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetId() string { return v.SceneParts.Id }

// GetTitle returns FindScenesFindScenesFindScenesResultTypeScenesScene.Title, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetTitle() *string {
	return v.SceneParts.Title
}

// GetRating100 returns FindScenesFindScenesFindScenesResultTypeScenesScene.Rating100, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetRating100() *int {
	return v.SceneParts.Rating100
}

// GetCreated_at returns FindScenesFindScenesFindScenesResultTypeScenesScene.Created_at, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetCreated_at() time.Time {
	return v.SceneParts.Created_at
}

// GetDate returns FindScenesFindScenesFindScenesResultTypeScenesScene.Date, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetDate() *string {
	return v.SceneParts.Date
}

// GetFiles returns FindScenesFindScenesFindScenesResultTypeScenesScene.Files, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetFiles() []*ScenePartsFilesVideoFile {
	return v.SceneParts.Files
}

// GetStudio returns FindScenesFindScenesFindScenesResultTypeScenesScene.Studio, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetStudio() *ScenePartsStudio {
	return v.SceneParts.Studio
}

// GetScene_markers returns FindScenesFindScenesFindScenesResultTypeScenesScene.Scene_markers, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetScene_markers() []*ScenePartsScene_markersSceneMarker {
	return v.SceneParts.Scene_markers
}

// GetPerformers returns FindScenesFindScenesFindScenesResultTypeScenesScene.Performers, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetPerformers() []*ScenePartsPerformersPerformer {
	return v.SceneParts.Performers
}

// GetGroups returns FindScenesFindScenesFindScenesResultTypeScenesScene.Groups, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetGroups() []*ScenePartsGroupsSceneGroup {
	return v.SceneParts.Groups
}

// GetPlay_count returns FindScenesFindScenesFindScenesResultTypeScenesScene.Play_count, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetPlay_count() *int {
	return v.SceneParts.Play_count
}

// GetO_counter returns FindScenesFindScenesFindScenesResultTypeScenesScene.O_counter, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetO_counter() *int {
	return v.SceneParts.O_counter
}

// GetOrganized returns FindScenesFindScenesFindScenesResultTypeScenesScene.Organized, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetOrganized() bool {
	return v.SceneParts.Organized
}

// GetPaths returns FindScenesFindScenesFindScenesResultTypeScenesScene.Paths, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetPaths() *ScenePartsPathsScenePathsType {
	return v.SceneParts.Paths
}

// GetSceneStreams returns FindScenesFindScenesFindScenesResultTypeScenesScene.SceneStreams, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetSceneStreams() []*ScenePartsSceneStreamsSceneStreamEndpoint {
	return v.SceneParts.SceneStreams
}

// GetCaptions returns FindScenesFindScenesFindScenesResultTypeScenesScene.Captions, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetCaptions() []*ScenePartsCaptionsVideoCaption {
	return v.SceneParts.Captions
}

// GetInteractive returns FindScenesFindScenesFindScenesResultTypeScenesScene.Interactive, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetInteractive() bool {
	return v.SceneParts.Interactive
}

// GetTags returns FindScenesFindScenesFindScenesResultTypeScenesScene.Tags, and is useful for accessing the field via an interface.
func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) GetTags() []*TagPartsArrayTagsTag {
	return v.SceneParts.TagPartsArray.Tags
}

func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindScenesFindScenesFindScenesResultTypeScenesScene
		graphql.NoUnmarshalJSON
	}
	firstPass.FindScenesFindScenesFindScenesResultTypeScenesScene = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SceneParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindScenesFindScenesFindScenesResultTypeScenesScene struct {
	Id string `json:"id"`

	Title *string `json:"title"`

	Rating100 *int `json:"rating100"`

	Created_at time.Time `json:"created_at"`

	Date *string `json:"date"`

	Files []*ScenePartsFilesVideoFile `json:"files"`

	Studio *ScenePartsStudio `json:"studio"`

	Scene_markers []*ScenePartsScene_markersSceneMarker `json:"scene_markers"`

	Performers []*ScenePartsPerformersPerformer `json:"performers"`

	Groups []*ScenePartsGroupsSceneGroup `json:"groups"`

	Play_count *int `json:"play_count"`

	O_counter *int `json:"o_counter"`

	Organized bool `json:"organized"`

	Paths *ScenePartsPathsScenePathsType `json:"paths"`

	SceneStreams []*ScenePartsSceneStreamsSceneStreamEndpoint `json:"sceneStreams"`

	Captions []*ScenePartsCaptionsVideoCaption `json:"captions"`

	Interactive bool `json:"interactive"`

	Tags []*TagPartsArrayTagsTag `json:"tags"`
}

func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindScenesFindScenesFindScenesResultTypeScenesScene) __premarshalJSON() (*__premarshalFindScenesFindScenesFindScenesResultTypeScenesScene, error) {
	var retval __premarshalFindScenesFindScenesFindScenesResultTypeScenesScene

	retval.Id = v.SceneParts.Id
	retval.Title = v.SceneParts.Title
	retval.Rating100 = v.SceneParts.Rating100
	retval.Created_at = v.SceneParts.Created_at
	retval.Date = v.SceneParts.Date
	retval.Files = v.SceneParts.Files
	retval.Studio = v.SceneParts.Studio
	retval.Scene_markers = v.SceneParts.Scene_markers
	retval.Performers = v.SceneParts.Performers
	retval.Groups = v.SceneParts.Groups
	retval.Play_count = v.SceneParts.Play_count
	retval.O_counter = v.SceneParts.O_counter
	retval.Organized = v.SceneParts.Organized
	retval.Paths = v.SceneParts.Paths
	retval.SceneStreams = v.SceneParts.SceneStreams
	retval.Captions = v.SceneParts.Captions
	retval.Interactive = v.SceneParts.Interactive
	retval.Tags = v.SceneParts.TagPartsArray.Tags
	return &retval, nil
}

// FindScenesResponse is returned by FindScenes on success.
type FindScenesResponse struct {
	// A function which queries Scene objects
	FindScenes *FindScenesFindScenesFindScenesResultType `json:"findScenes"`
}

// GetFindScenes returns FindScenesResponse.FindScenes, and is useful for accessing the field via an interface.
func (v *FindScenesResponse) GetFindScenes() *FindScenesFindScenesFindScenesResultType {
	return v.FindScenes
}

// FindStudioByNameFindStudiosFindStudiosResultType includes the requested fields of the GraphQL type FindStudiosResultType.
type FindStudioByNameFindStudiosFindStudiosResultType struct {
	Studios []*FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio `json:"studios"`
}

// GetStudios returns FindStudioByNameFindStudiosFindStudiosResultType.Studios, and is useful for accessing the field via an interface.
func (v *FindStudioByNameFindStudiosFindStudiosResultType) GetStudios() []*FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio {
	return v.Studios
}

// FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio includes the requested fields of the GraphQL type Studio.
type FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio struct {
	Id string `json:"id"`
}

// GetId returns FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio.Id, and is useful for accessing the field via an interface.
func (v *FindStudioByNameFindStudiosFindStudiosResultTypeStudiosStudio) GetId() string { return v.Id }

// FindStudioByNameResponse is returned by FindStudioByName on success.
type FindStudioByNameResponse struct {
	// A function which queries Studio objects
	FindStudios *FindStudioByNameFindStudiosFindStudiosResultType `json:"findStudios"`
}

// GetFindStudios returns FindStudioByNameResponse.FindStudios, and is useful for accessing the field via an interface.
func (v *FindStudioByNameResponse) GetFindStudios() *FindStudioByNameFindStudiosFindStudiosResultType {
	return v.FindStudios
}

// FindTagByNameFindTagsFindTagsResultType includes the requested fields of the GraphQL type FindTagsResultType.
type FindTagByNameFindTagsFindTagsResultType struct {
	Tags []*FindTagByNameFindTagsFindTagsResultTypeTagsTag `json:"tags"`
}

// GetTags returns FindTagByNameFindTagsFindTagsResultType.Tags, and is useful for accessing the field via an interface.
func (v *FindTagByNameFindTagsFindTagsResultType) GetTags() []*FindTagByNameFindTagsFindTagsResultTypeTagsTag {
	return v.Tags
}

// FindTagByNameFindTagsFindTagsResultTypeTagsTag includes the requested fields of the GraphQL type Tag.
type FindTagByNameFindTagsFindTagsResultTypeTagsTag struct {
	Id string `json:"id"`
}

// GetId returns FindTagByNameFindTagsFindTagsResultTypeTagsTag.Id, and is useful for accessing the field via an interface.
func (v *FindTagByNameFindTagsFindTagsResultTypeTagsTag) GetId() string { return v.Id }

// FindTagByNameResponse is returned by FindTagByName on success.
type FindTagByNameResponse struct {
	FindTags *FindTagByNameFindTagsFindTagsResultType `json:"findTags"`
}

// GetFindTags returns FindTagByNameResponse.FindTags, and is useful for accessing the field via an interface.
func (v *FindTagByNameResponse) GetFindTags() *FindTagByNameFindTagsFindTagsResultType {
	return v.FindTags
}

// FindTagsFindTagsFindTagsResultType includes the requested fields of the GraphQL type FindTagsResultType.
type FindTagsFindTagsFindTagsResultType struct {
	Tags []*FindTagsFindTagsFindTagsResultTypeTagsTag `json:"tags"`
}

// GetTags returns FindTagsFindTagsFindTagsResultType.Tags, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultType) GetTags() []*FindTagsFindTagsFindTagsResultTypeTagsTag {
	return v.Tags
}

// FindTagsFindTagsFindTagsResultTypeTagsTag includes the requested fields of the GraphQL type Tag.
type FindTagsFindTagsFindTagsResultTypeTagsTag struct {
	TagParts    `json:"-"`
	Scene_count int `json:"scene_count"`
}

// GetScene_count returns FindTagsFindTagsFindTagsResultTypeTagsTag.Scene_count, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) GetScene_count() int { return v.Scene_count }

// GetId returns FindTagsFindTagsFindTagsResultTypeTagsTag.Id, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) GetId() string { return v.TagParts.Id }

// GetName returns FindTagsFindTagsFindTagsResultTypeTagsTag.Name, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) GetName() string { return v.TagParts.Name }

// GetSort_name returns FindTagsFindTagsFindTagsResultTypeTagsTag.Sort_name, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) GetSort_name() *string {
	return v.TagParts.Sort_name
}

// GetParents returns FindTagsFindTagsFindTagsResultTypeTagsTag.Parents, and is useful for accessing the field via an interface.
func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) GetParents() []*TagPartsParentsTag {
	return v.TagParts.Parents
}

func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindTagsFindTagsFindTagsResultTypeTagsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.FindTagsFindTagsFindTagsResultTypeTagsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindTagsFindTagsFindTagsResultTypeTagsTag struct {
	Scene_count int `json:"scene_count"`

	Id string `json:"id"`

	Name string `json:"name"`

	Sort_name *string `json:"sort_name"`

	Parents []*TagPartsParentsTag `json:"parents"`
}

func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindTagsFindTagsFindTagsResultTypeTagsTag) __premarshalJSON() (*__premarshalFindTagsFindTagsFindTagsResultTypeTagsTag, error) {
	var retval __premarshalFindTagsFindTagsFindTagsResultTypeTagsTag

	retval.Scene_count = v.Scene_count
	retval.Id = v.TagParts.Id
	retval.Name = v.TagParts.Name
	retval.Sort_name = v.TagParts.Sort_name
	retval.Parents = v.TagParts.Parents
	return &retval, nil
}

// FindTagsResponse is returned by FindTags on success.
type FindTagsResponse struct {
	FindTags *FindTagsFindTagsFindTagsResultType `json:"findTags"`
}

// GetFindTags returns FindTagsResponse.FindTags, and is useful for accessing the field via an interface.
func (v *FindTagsResponse) GetFindTags() *FindTagsFindTagsFindTagsResultType { return v.FindTags }

type FloatCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    float64           `json:"value"`
	Value2   *float64          `json:"value2"`
}

// GetModifier returns FloatCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *FloatCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns FloatCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *FloatCriterionInput) GetValue() float64 { return v.Value }

// GetValue2 returns FloatCriterionInput.Value2, and is useful for accessing the field via an interface.
func (v *FloatCriterionInput) GetValue2() *float64 { return v.Value2 }

type GalleryFilterType struct {
	AND *GalleryFilterType `json:"AND,omitempty"`
	NOT *GalleryFilterType `json:"NOT,omitempty"`
	OR  *GalleryFilterType `json:"OR,omitempty"`
	// Filter by average image resolution
	Average_resolution *ResolutionCriterionInput `json:"average_resolution,omitempty"`
	// Filter by file checksum
	Checksum *StringCriterionInput `json:"checksum,omitempty"`
	// Filter by studio code
	Code *StringCriterionInput `json:"code,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by date
	Date    *DateCriterionInput   `json:"date,omitempty"`
	Details *StringCriterionInput `json:"details,omitempty"`
	// Filter by zip-file count
	File_count *IntCriterionInput `json:"file_count,omitempty"`
	// Filter to only include galleries that have chapters. `true` or `false`
	Has_chapters *string            `json:"has_chapters"`
	Id           *IntCriterionInput `json:"id,omitempty"`
	// Filter by number of images in this gallery
	Image_count *IntCriterionInput `json:"image_count,omitempty"`
	// Filter by related images that meet this criteria
	Images_filter *ImageFilterType `json:"images_filter,omitempty"`
	// Filter to only include galleries missing this property
	Is_missing *string `json:"is_missing"`
	// Filter to include/exclude galleries that were created from zip
	Is_zip *bool `json:"is_zip"`
	// Filter by organized
	Organized *bool `json:"organized"`
	// Filter by path
	Path *StringCriterionInput `json:"path,omitempty"`
	// Filter galleries by performer age at time of gallery
	Performer_age *IntCriterionInput `json:"performer_age,omitempty"`
	// Filter by performer count
	Performer_count *IntCriterionInput `json:"performer_count,omitempty"`
	// Filter galleries that have performers that have been favorited
	Performer_favorite *bool `json:"performer_favorite"`
	// Filter to only include galleries with performers with these tags
	Performer_tags *HierarchicalMultiCriterionInput `json:"performer_tags,omitempty"`
	// Filter to only include galleries with these performers
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	// Filter by related performers that meet this criteria
	Performers_filter *PerformerFilterType `json:"performers_filter,omitempty"`
	// Filter by photographer
	Photographer *StringCriterionInput `json:"photographer,omitempty"`
	Rating100    *IntCriterionInput    `json:"rating100,omitempty"`
	// Filter to only include galleries with these scenes
	Scenes *MultiCriterionInput `json:"scenes,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter to only include galleries with this studio
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by related studios that meet this criteria
	Studios_filter *StudioFilterType `json:"studios_filter,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include galleries with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by related tags that meet this criteria
	Tags_filter *TagFilterType        `json:"tags_filter,omitempty"`
	Title       *StringCriterionInput `json:"title,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
}

// GetAND returns GalleryFilterType.AND, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetAND() *GalleryFilterType { return v.AND }

// GetNOT returns GalleryFilterType.NOT, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetNOT() *GalleryFilterType { return v.NOT }

// GetOR returns GalleryFilterType.OR, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetOR() *GalleryFilterType { return v.OR }

// GetAverage_resolution returns GalleryFilterType.Average_resolution, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetAverage_resolution() *ResolutionCriterionInput {
	return v.Average_resolution
}

// GetChecksum returns GalleryFilterType.Checksum, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetChecksum() *StringCriterionInput { return v.Checksum }

// GetCode returns GalleryFilterType.Code, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetCode() *StringCriterionInput { return v.Code }

// GetCreated_at returns GalleryFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDate returns GalleryFilterType.Date, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetDate() *DateCriterionInput { return v.Date }

// GetDetails returns GalleryFilterType.Details, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetDetails() *StringCriterionInput { return v.Details }

// GetFile_count returns GalleryFilterType.File_count, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetFile_count() *IntCriterionInput { return v.File_count }

// GetHas_chapters returns GalleryFilterType.Has_chapters, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetHas_chapters() *string { return v.Has_chapters }

// GetId returns GalleryFilterType.Id, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetId() *IntCriterionInput { return v.Id }

// GetImage_count returns GalleryFilterType.Image_count, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetImage_count() *IntCriterionInput { return v.Image_count }

// GetImages_filter returns GalleryFilterType.Images_filter, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetImages_filter() *ImageFilterType { return v.Images_filter }

// GetIs_missing returns GalleryFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetIs_missing() *string { return v.Is_missing }

// GetIs_zip returns GalleryFilterType.Is_zip, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetIs_zip() *bool { return v.Is_zip }

// GetOrganized returns GalleryFilterType.Organized, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetOrganized() *bool { return v.Organized }

// GetPath returns GalleryFilterType.Path, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPath() *StringCriterionInput { return v.Path }

// GetPerformer_age returns GalleryFilterType.Performer_age, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformer_age() *IntCriterionInput { return v.Performer_age }

// GetPerformer_count returns GalleryFilterType.Performer_count, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformer_count() *IntCriterionInput { return v.Performer_count }

// GetPerformer_favorite returns GalleryFilterType.Performer_favorite, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformer_favorite() *bool { return v.Performer_favorite }

// GetPerformer_tags returns GalleryFilterType.Performer_tags, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformer_tags() *HierarchicalMultiCriterionInput {
	return v.Performer_tags
}

// GetPerformers returns GalleryFilterType.Performers, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetPerformers_filter returns GalleryFilterType.Performers_filter, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPerformers_filter() *PerformerFilterType { return v.Performers_filter }

// GetPhotographer returns GalleryFilterType.Photographer, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetPhotographer() *StringCriterionInput { return v.Photographer }

// GetRating100 returns GalleryFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetScenes returns GalleryFilterType.Scenes, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetScenes() *MultiCriterionInput { return v.Scenes }

// GetScenes_filter returns GalleryFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetStudios returns GalleryFilterType.Studios, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetStudios_filter returns GalleryFilterType.Studios_filter, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetStudios_filter() *StudioFilterType { return v.Studios_filter }

// GetTag_count returns GalleryFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns GalleryFilterType.Tags, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetTags_filter returns GalleryFilterType.Tags_filter, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetTags_filter() *TagFilterType { return v.Tags_filter }

// GetTitle returns GalleryFilterType.Title, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetTitle() *StringCriterionInput { return v.Title }

// GetUpdated_at returns GalleryFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns GalleryFilterType.Url, and is useful for accessing the field via an interface.
func (v *GalleryFilterType) GetUrl() *StringCriterionInput { return v.Url }

type GenderCriterionInput struct {
	Modifier   CriterionModifier `json:"modifier"`
	Value      *GenderEnum       `json:"value"`
	Value_list []GenderEnum      `json:"value_list"`
}

// GetModifier returns GenderCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *GenderCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns GenderCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *GenderCriterionInput) GetValue() *GenderEnum { return v.Value }

// GetValue_list returns GenderCriterionInput.Value_list, and is useful for accessing the field via an interface.
func (v *GenderCriterionInput) GetValue_list() []GenderEnum { return v.Value_list }

type GenderEnum string

const (
	GenderEnumFemale            GenderEnum = "FEMALE"
	GenderEnumIntersex          GenderEnum = "INTERSEX"
	GenderEnumMale              GenderEnum = "MALE"
	GenderEnumNonBinary         GenderEnum = "NON_BINARY"
	GenderEnumTransgenderFemale GenderEnum = "TRANSGENDER_FEMALE"
	GenderEnumTransgenderMale   GenderEnum = "TRANSGENDER_MALE"
)

var AllGenderEnum = []GenderEnum{
	GenderEnumFemale,
	GenderEnumIntersex,
	GenderEnumMale,
	GenderEnumNonBinary,
	GenderEnumTransgenderFemale,
	GenderEnumTransgenderMale,
}

type GroupFilterType struct {
	AND *GroupFilterType `json:"AND,omitempty"`
	NOT *GroupFilterType `json:"NOT,omitempty"`
	OR  *GroupFilterType `json:"OR,omitempty"`
	// Filter by number of containing groups the group has
	Containing_group_count *IntCriterionInput `json:"containing_group_count,omitempty"`
	// Filter by containing groups
	Containing_groups *HierarchicalMultiCriterionInput `json:"containing_groups,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by date
	Date     *DateCriterionInput   `json:"date,omitempty"`
	Director *StringCriterionInput `json:"director,omitempty"`
	// Filter by duration (in seconds)
	Duration *IntCriterionInput `json:"duration,omitempty"`
	// Filter to only include groups missing this property
	Is_missing *string               `json:"is_missing"`
	Name       *StringCriterionInput `json:"name,omitempty"`
	// Filter to only include groups where performer appears in a scene
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	Rating100  *IntCriterionInput   `json:"rating100,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter to only include groups with this studio
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by related studios that meet this criteria
	Studios_filter *StudioFilterType `json:"studios_filter,omitempty"`
	// Filter by number of sub-groups the group has
	Sub_group_count *IntCriterionInput `json:"sub_group_count,omitempty"`
	// Filter by sub groups
	Sub_groups *HierarchicalMultiCriterionInput `json:"sub_groups,omitempty"`
	Synopsis   *StringCriterionInput            `json:"synopsis,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include groups with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
}

// GetAND returns GroupFilterType.AND, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetAND() *GroupFilterType { return v.AND }

// GetNOT returns GroupFilterType.NOT, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetNOT() *GroupFilterType { return v.NOT }

// GetOR returns GroupFilterType.OR, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetOR() *GroupFilterType { return v.OR }

// GetContaining_group_count returns GroupFilterType.Containing_group_count, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetContaining_group_count() *IntCriterionInput {
	return v.Containing_group_count
}

// GetContaining_groups returns GroupFilterType.Containing_groups, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetContaining_groups() *HierarchicalMultiCriterionInput {
	return v.Containing_groups
}

// GetCreated_at returns GroupFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDate returns GroupFilterType.Date, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetDate() *DateCriterionInput { return v.Date }

// GetDirector returns GroupFilterType.Director, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetDirector() *StringCriterionInput { return v.Director }

// GetDuration returns GroupFilterType.Duration, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetDuration() *IntCriterionInput { return v.Duration }

// GetIs_missing returns GroupFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetIs_missing() *string { return v.Is_missing }

// GetName returns GroupFilterType.Name, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetName() *StringCriterionInput { return v.Name }

// GetPerformers returns GroupFilterType.Performers, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetRating100 returns GroupFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetScenes_filter returns GroupFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetStudios returns GroupFilterType.Studios, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetStudios_filter returns GroupFilterType.Studios_filter, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetStudios_filter() *StudioFilterType { return v.Studios_filter }

// GetSub_group_count returns GroupFilterType.Sub_group_count, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetSub_group_count() *IntCriterionInput { return v.Sub_group_count }

// GetSub_groups returns GroupFilterType.Sub_groups, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetSub_groups() *HierarchicalMultiCriterionInput { return v.Sub_groups }

// GetSynopsis returns GroupFilterType.Synopsis, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetSynopsis() *StringCriterionInput { return v.Synopsis }

// GetTag_count returns GroupFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns GroupFilterType.Tags, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetUpdated_at returns GroupFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns GroupFilterType.Url, and is useful for accessing the field via an interface.
func (v *GroupFilterType) GetUrl() *StringCriterionInput { return v.Url }

type HierarchicalMultiCriterionInput struct {
	Depth    *int              `json:"depth"`
	Excludes []string          `json:"excludes"`
	Modifier CriterionModifier `json:"modifier"`
	Value    []string          `json:"value"`
}

// GetDepth returns HierarchicalMultiCriterionInput.Depth, and is useful for accessing the field via an interface.
func (v *HierarchicalMultiCriterionInput) GetDepth() *int { return v.Depth }

// GetExcludes returns HierarchicalMultiCriterionInput.Excludes, and is useful for accessing the field via an interface.
func (v *HierarchicalMultiCriterionInput) GetExcludes() []string { return v.Excludes }

// GetModifier returns HierarchicalMultiCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *HierarchicalMultiCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns HierarchicalMultiCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *HierarchicalMultiCriterionInput) GetValue() []string { return v.Value }

type ImageFilterType struct {
	AND *ImageFilterType `json:"AND,omitempty"`
	NOT *ImageFilterType `json:"NOT,omitempty"`
	OR  *ImageFilterType `json:"OR,omitempty"`
	// Filter by file checksum
	Checksum *StringCriterionInput `json:"checksum,omitempty"`
	// Filter by studio code
	Code *StringCriterionInput `json:"code,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by date
	Date    *DateCriterionInput   `json:"date,omitempty"`
	Details *StringCriterionInput `json:"details,omitempty"`
	// Filter by file count
	File_count *IntCriterionInput `json:"file_count,omitempty"`
	// Filter to only include images with these galleries
	Galleries *MultiCriterionInput `json:"galleries,omitempty"`
	// Filter by related galleries that meet this criteria
	Galleries_filter *GalleryFilterType `json:"galleries_filter,omitempty"`
	// Filter by image id
	Id *IntCriterionInput `json:"id,omitempty"`
	// Filter to only include images missing this property
	Is_missing *string `json:"is_missing"`
	// Filter by o-counter
	O_counter *IntCriterionInput `json:"o_counter,omitempty"`
	// Filter by organized
	Organized *bool `json:"organized"`
	// Filter by orientation
	Orientation *OrientationCriterionInput `json:"orientation,omitempty"`
	// Filter by path
	Path *StringCriterionInput `json:"path,omitempty"`
	// Filter images by performer age at time of image
	Performer_age *IntCriterionInput `json:"performer_age,omitempty"`
	// Filter by performer count
	Performer_count *IntCriterionInput `json:"performer_count,omitempty"`
	// Filter images that have performers that have been favorited
	Performer_favorite *bool `json:"performer_favorite"`
	// Filter to only include images with performers with these tags
	Performer_tags *HierarchicalMultiCriterionInput `json:"performer_tags,omitempty"`
	// Filter to only include images with these performers
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	// Filter by related performers that meet this criteria
	Performers_filter *PerformerFilterType `json:"performers_filter,omitempty"`
	// Filter by photographer
	Photographer *StringCriterionInput `json:"photographer,omitempty"`
	Rating100    *IntCriterionInput    `json:"rating100,omitempty"`
	// Filter by resolution
	Resolution *ResolutionCriterionInput `json:"resolution,omitempty"`
	// Filter to only include images with this studio
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by related studios that meet this criteria
	Studios_filter *StudioFilterType `json:"studios_filter,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include images with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by related tags that meet this criteria
	Tags_filter *TagFilterType        `json:"tags_filter,omitempty"`
	Title       *StringCriterionInput `json:"title,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
}

// GetAND returns ImageFilterType.AND, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetAND() *ImageFilterType { return v.AND }

// GetNOT returns ImageFilterType.NOT, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetNOT() *ImageFilterType { return v.NOT }

// GetOR returns ImageFilterType.OR, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetOR() *ImageFilterType { return v.OR }

// GetChecksum returns ImageFilterType.Checksum, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetChecksum() *StringCriterionInput { return v.Checksum }

// GetCode returns ImageFilterType.Code, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetCode() *StringCriterionInput { return v.Code }

// GetCreated_at returns ImageFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDate returns ImageFilterType.Date, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetDate() *DateCriterionInput { return v.Date }

// GetDetails returns ImageFilterType.Details, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetDetails() *StringCriterionInput { return v.Details }

// GetFile_count returns ImageFilterType.File_count, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetFile_count() *IntCriterionInput { return v.File_count }

// GetGalleries returns ImageFilterType.Galleries, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetGalleries() *MultiCriterionInput { return v.Galleries }

// GetGalleries_filter returns ImageFilterType.Galleries_filter, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetGalleries_filter() *GalleryFilterType { return v.Galleries_filter }

// GetId returns ImageFilterType.Id, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetId() *IntCriterionInput { return v.Id }

// GetIs_missing returns ImageFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetIs_missing() *string { return v.Is_missing }

// GetO_counter returns ImageFilterType.O_counter, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetO_counter() *IntCriterionInput { return v.O_counter }

// GetOrganized returns ImageFilterType.Organized, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetOrganized() *bool { return v.Organized }

// GetOrientation returns ImageFilterType.Orientation, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetOrientation() *OrientationCriterionInput { return v.Orientation }

// GetPath returns ImageFilterType.Path, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPath() *StringCriterionInput { return v.Path }

// GetPerformer_age returns ImageFilterType.Performer_age, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformer_age() *IntCriterionInput { return v.Performer_age }

// GetPerformer_count returns ImageFilterType.Performer_count, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformer_count() *IntCriterionInput { return v.Performer_count }

// GetPerformer_favorite returns ImageFilterType.Performer_favorite, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformer_favorite() *bool { return v.Performer_favorite }

// GetPerformer_tags returns ImageFilterType.Performer_tags, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformer_tags() *HierarchicalMultiCriterionInput {
	return v.Performer_tags
}

// GetPerformers returns ImageFilterType.Performers, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetPerformers_filter returns ImageFilterType.Performers_filter, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPerformers_filter() *PerformerFilterType { return v.Performers_filter }

// GetPhotographer returns ImageFilterType.Photographer, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetPhotographer() *StringCriterionInput { return v.Photographer }

// GetRating100 returns ImageFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetResolution returns ImageFilterType.Resolution, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetResolution() *ResolutionCriterionInput { return v.Resolution }

// GetStudios returns ImageFilterType.Studios, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetStudios_filter returns ImageFilterType.Studios_filter, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetStudios_filter() *StudioFilterType { return v.Studios_filter }

// GetTag_count returns ImageFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns ImageFilterType.Tags, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetTags_filter returns ImageFilterType.Tags_filter, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetTags_filter() *TagFilterType { return v.Tags_filter }

// GetTitle returns ImageFilterType.Title, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetTitle() *StringCriterionInput { return v.Title }

// GetUpdated_at returns ImageFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns ImageFilterType.Url, and is useful for accessing the field via an interface.
func (v *ImageFilterType) GetUrl() *StringCriterionInput { return v.Url }

type IntCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    int               `json:"value"`
	Value2   *int              `json:"value2"`
}

// GetModifier returns IntCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *IntCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns IntCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *IntCriterionInput) GetValue() int { return v.Value }

// GetValue2 returns IntCriterionInput.Value2, and is useful for accessing the field via an interface.
func (v *IntCriterionInput) GetValue2() *int { return v.Value2 }

// IsSceneOrganizedFindScene includes the requested fields of the GraphQL type Scene.
type IsSceneOrganizedFindScene struct {
	Organized bool `json:"organized"`
}

// GetOrganized returns IsSceneOrganizedFindScene.Organized, and is useful for accessing the field via an interface.
func (v *IsSceneOrganizedFindScene) GetOrganized() bool { return v.Organized }

// IsSceneOrganizedResponse is returned by IsSceneOrganized on success.
type IsSceneOrganizedResponse struct {
	// Find a scene by ID or Checksum
	FindScene *IsSceneOrganizedFindScene `json:"findScene"`
}

// GetFindScene returns IsSceneOrganizedResponse.FindScene, and is useful for accessing the field via an interface.
func (v *IsSceneOrganizedResponse) GetFindScene() *IsSceneOrganizedFindScene { return v.FindScene }

type MovieFilterType struct {
	AND *MovieFilterType `json:"AND,omitempty"`
	NOT *MovieFilterType `json:"NOT,omitempty"`
	OR  *MovieFilterType `json:"OR,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by date
	Date     *DateCriterionInput   `json:"date,omitempty"`
	Director *StringCriterionInput `json:"director,omitempty"`
	// Filter by duration (in seconds)
	Duration *IntCriterionInput `json:"duration,omitempty"`
	// Filter to only include movies missing this property
	Is_missing *string               `json:"is_missing"`
	Name       *StringCriterionInput `json:"name,omitempty"`
	// Filter to only include movies where performer appears in a scene
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	Rating100  *IntCriterionInput   `json:"rating100,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter to only include movies with this studio
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by related studios that meet this criteria
	Studios_filter *StudioFilterType     `json:"studios_filter,omitempty"`
	Synopsis       *StringCriterionInput `json:"synopsis,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include movies with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
}

// GetAND returns MovieFilterType.AND, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetAND() *MovieFilterType { return v.AND }

// GetNOT returns MovieFilterType.NOT, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetNOT() *MovieFilterType { return v.NOT }

// GetOR returns MovieFilterType.OR, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetOR() *MovieFilterType { return v.OR }

// GetCreated_at returns MovieFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDate returns MovieFilterType.Date, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetDate() *DateCriterionInput { return v.Date }

// GetDirector returns MovieFilterType.Director, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetDirector() *StringCriterionInput { return v.Director }

// GetDuration returns MovieFilterType.Duration, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetDuration() *IntCriterionInput { return v.Duration }

// GetIs_missing returns MovieFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetIs_missing() *string { return v.Is_missing }

// GetName returns MovieFilterType.Name, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetName() *StringCriterionInput { return v.Name }

// GetPerformers returns MovieFilterType.Performers, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetRating100 returns MovieFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetScenes_filter returns MovieFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetStudios returns MovieFilterType.Studios, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetStudios_filter returns MovieFilterType.Studios_filter, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetStudios_filter() *StudioFilterType { return v.Studios_filter }

// GetSynopsis returns MovieFilterType.Synopsis, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetSynopsis() *StringCriterionInput { return v.Synopsis }

// GetTag_count returns MovieFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns MovieFilterType.Tags, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetUpdated_at returns MovieFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns MovieFilterType.Url, and is useful for accessing the field via an interface.
func (v *MovieFilterType) GetUrl() *StringCriterionInput { return v.Url }

type MultiCriterionInput struct {
	Excludes []string          `json:"excludes"`
	Modifier CriterionModifier `json:"modifier"`
	Value    []string          `json:"value"`
}

// GetExcludes returns MultiCriterionInput.Excludes, and is useful for accessing the field via an interface.
func (v *MultiCriterionInput) GetExcludes() []string { return v.Excludes }

// GetModifier returns MultiCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *MultiCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns MultiCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *MultiCriterionInput) GetValue() []string { return v.Value }

type OrientationCriterionInput struct {
	Value []OrientationEnum `json:"value"`
}

// GetValue returns OrientationCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *OrientationCriterionInput) GetValue() []OrientationEnum { return v.Value }

type OrientationEnum string

const (
	// Landscape
	OrientationEnumLandscape OrientationEnum = "LANDSCAPE"
	// Portrait
	OrientationEnumPortrait OrientationEnum = "PORTRAIT"
	// Square
	OrientationEnumSquare OrientationEnum = "SQUARE"
)

var AllOrientationEnum = []OrientationEnum{
	OrientationEnumLandscape,
	OrientationEnumPortrait,
	OrientationEnumSquare,
}

type PHashDuplicationCriterionInput struct {
	// Currently unimplemented
	Distance   *int  `json:"distance"`
	Duplicated *bool `json:"duplicated"`
}

// GetDistance returns PHashDuplicationCriterionInput.Distance, and is useful for accessing the field via an interface.
func (v *PHashDuplicationCriterionInput) GetDistance() *int { return v.Distance }

// GetDuplicated returns PHashDuplicationCriterionInput.Duplicated, and is useful for accessing the field via an interface.
func (v *PHashDuplicationCriterionInput) GetDuplicated() *bool { return v.Duplicated }

type PerformerFilterType struct {
	AND *PerformerFilterType `json:"AND,omitempty"`
	NOT *PerformerFilterType `json:"NOT,omitempty"`
	OR  *PerformerFilterType `json:"OR,omitempty"`
	// Filter by age
	Age *IntCriterionInput `json:"age,omitempty"`
	// Filter by aliases
	Aliases *StringCriterionInput `json:"aliases,omitempty"`
	// Filter by birth year
	Birth_year *IntCriterionInput `json:"birth_year,omitempty"`
	// Filter by birthdate
	Birthdate *DateCriterionInput `json:"birthdate,omitempty"`
	// Filter by career length
	Career_length *StringCriterionInput `json:"career_length,omitempty"`
	// Filter by ciricumcision
	Circumcised *CircumcisionCriterionInput `json:"circumcised,omitempty"`
	// Filter by country
	Country *StringCriterionInput `json:"country,omitempty"`
	// Filter by creation time
	Created_at    *TimestampCriterionInput     `json:"created_at,omitempty"`
	Custom_fields []*CustomFieldCriterionInput `json:"custom_fields,omitempty"`
	// Filter by death date
	Death_date *DateCriterionInput `json:"death_date,omitempty"`
	// Filter by death year
	Death_year     *IntCriterionInput    `json:"death_year,omitempty"`
	Details        *StringCriterionInput `json:"details,omitempty"`
	Disambiguation *StringCriterionInput `json:"disambiguation,omitempty"`
	// Filter by ethnicity
	Ethnicity *StringCriterionInput `json:"ethnicity,omitempty"`
	// Filter by eye color
	Eye_color *StringCriterionInput `json:"eye_color,omitempty"`
	// Filter by fake tits value
	Fake_tits *StringCriterionInput `json:"fake_tits,omitempty"`
	// Filter by favorite
	Filter_favorites *bool `json:"filter_favorites"`
	// Filter by related galleries that meet this criteria
	Galleries_filter *GalleryFilterType `json:"galleries_filter,omitempty"`
	// Filter by gallery count
	Gallery_count *IntCriterionInput `json:"gallery_count,omitempty"`
	// Filter by gender
	Gender *GenderCriterionInput `json:"gender,omitempty"`
	// Filter by hair color
	Hair_color *StringCriterionInput `json:"hair_color,omitempty"`
	// Filter by height in cm
	Height_cm *IntCriterionInput `json:"height_cm,omitempty"`
	// Filter by autotag ignore value
	Ignore_auto_tag *bool `json:"ignore_auto_tag"`
	// Filter by image count
	Image_count *IntCriterionInput `json:"image_count,omitempty"`
	// Filter by related images that meet this criteria
	Images_filter *ImageFilterType `json:"images_filter,omitempty"`
	// Filter to only include performers missing this property
	Is_missing *string `json:"is_missing"`
	// Filter by measurements
	Measurements *StringCriterionInput `json:"measurements,omitempty"`
	Name         *StringCriterionInput `json:"name,omitempty"`
	// Filter by o count
	O_counter *IntCriterionInput `json:"o_counter,omitempty"`
	// Filter by penis length value
	Penis_length *FloatCriterionInput `json:"penis_length,omitempty"`
	// Filter by performers where performer appears with another performer in scene/image/gallery
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	// Filter by piercings
	Piercings *StringCriterionInput `json:"piercings,omitempty"`
	// Filter by play count
	Play_count *IntCriterionInput `json:"play_count,omitempty"`
	Rating100  *IntCriterionInput `json:"rating100,omitempty"`
	// Filter by scene count
	Scene_count *IntCriterionInput `json:"scene_count,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter by StashID
	Stash_id_endpoint *StashIDCriterionInput `json:"stash_id_endpoint,omitempty"`
	// Filter by studios where performer appears in scene/image/gallery
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include performers with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by related tags that meet this criteria
	Tags_filter *TagFilterType `json:"tags_filter,omitempty"`
	// Filter by tattoos
	Tattoos *StringCriterionInput `json:"tattoos,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
	// Filter by weight
	Weight *IntCriterionInput `json:"weight,omitempty"`
}

// GetAND returns PerformerFilterType.AND, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetAND() *PerformerFilterType { return v.AND }

// GetNOT returns PerformerFilterType.NOT, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetNOT() *PerformerFilterType { return v.NOT }

// GetOR returns PerformerFilterType.OR, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetOR() *PerformerFilterType { return v.OR }

// GetAge returns PerformerFilterType.Age, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetAge() *IntCriterionInput { return v.Age }

// GetAliases returns PerformerFilterType.Aliases, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetAliases() *StringCriterionInput { return v.Aliases }

// GetBirth_year returns PerformerFilterType.Birth_year, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetBirth_year() *IntCriterionInput { return v.Birth_year }

// GetBirthdate returns PerformerFilterType.Birthdate, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetBirthdate() *DateCriterionInput { return v.Birthdate }

// GetCareer_length returns PerformerFilterType.Career_length, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetCareer_length() *StringCriterionInput { return v.Career_length }

// GetCircumcised returns PerformerFilterType.Circumcised, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetCircumcised() *CircumcisionCriterionInput { return v.Circumcised }

// GetCountry returns PerformerFilterType.Country, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetCountry() *StringCriterionInput { return v.Country }

// GetCreated_at returns PerformerFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetCustom_fields returns PerformerFilterType.Custom_fields, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetCustom_fields() []*CustomFieldCriterionInput { return v.Custom_fields }

// GetDeath_date returns PerformerFilterType.Death_date, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetDeath_date() *DateCriterionInput { return v.Death_date }

// GetDeath_year returns PerformerFilterType.Death_year, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetDeath_year() *IntCriterionInput { return v.Death_year }

// GetDetails returns PerformerFilterType.Details, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetDetails() *StringCriterionInput { return v.Details }

// GetDisambiguation returns PerformerFilterType.Disambiguation, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetDisambiguation() *StringCriterionInput { return v.Disambiguation }

// GetEthnicity returns PerformerFilterType.Ethnicity, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetEthnicity() *StringCriterionInput { return v.Ethnicity }

// GetEye_color returns PerformerFilterType.Eye_color, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetEye_color() *StringCriterionInput { return v.Eye_color }

// GetFake_tits returns PerformerFilterType.Fake_tits, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetFake_tits() *StringCriterionInput { return v.Fake_tits }

// GetFilter_favorites returns PerformerFilterType.Filter_favorites, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetFilter_favorites() *bool { return v.Filter_favorites }

// GetGalleries_filter returns PerformerFilterType.Galleries_filter, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetGalleries_filter() *GalleryFilterType { return v.Galleries_filter }

// GetGallery_count returns PerformerFilterType.Gallery_count, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetGallery_count() *IntCriterionInput { return v.Gallery_count }

// GetGender returns PerformerFilterType.Gender, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetGender() *GenderCriterionInput { return v.Gender }

// GetHair_color returns PerformerFilterType.Hair_color, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetHair_color() *StringCriterionInput { return v.Hair_color }

// GetHeight_cm returns PerformerFilterType.Height_cm, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetHeight_cm() *IntCriterionInput { return v.Height_cm }

// GetIgnore_auto_tag returns PerformerFilterType.Ignore_auto_tag, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetIgnore_auto_tag() *bool { return v.Ignore_auto_tag }

// GetImage_count returns PerformerFilterType.Image_count, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetImage_count() *IntCriterionInput { return v.Image_count }

// GetImages_filter returns PerformerFilterType.Images_filter, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetImages_filter() *ImageFilterType { return v.Images_filter }

// GetIs_missing returns PerformerFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetIs_missing() *string { return v.Is_missing }

// GetMeasurements returns PerformerFilterType.Measurements, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetMeasurements() *StringCriterionInput { return v.Measurements }

// GetName returns PerformerFilterType.Name, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetName() *StringCriterionInput { return v.Name }

// GetO_counter returns PerformerFilterType.O_counter, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetO_counter() *IntCriterionInput { return v.O_counter }

// GetPenis_length returns PerformerFilterType.Penis_length, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetPenis_length() *FloatCriterionInput { return v.Penis_length }

// GetPerformers returns PerformerFilterType.Performers, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetPiercings returns PerformerFilterType.Piercings, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetPiercings() *StringCriterionInput { return v.Piercings }

// GetPlay_count returns PerformerFilterType.Play_count, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetPlay_count() *IntCriterionInput { return v.Play_count }

// GetRating100 returns PerformerFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetScene_count returns PerformerFilterType.Scene_count, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetScene_count() *IntCriterionInput { return v.Scene_count }

// GetScenes_filter returns PerformerFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetStash_id_endpoint returns PerformerFilterType.Stash_id_endpoint, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetStash_id_endpoint() *StashIDCriterionInput {
	return v.Stash_id_endpoint
}

// GetStudios returns PerformerFilterType.Studios, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetTag_count returns PerformerFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns PerformerFilterType.Tags, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetTags_filter returns PerformerFilterType.Tags_filter, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetTags_filter() *TagFilterType { return v.Tags_filter }

// GetTattoos returns PerformerFilterType.Tattoos, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetTattoos() *StringCriterionInput { return v.Tattoos }

// GetUpdated_at returns PerformerFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns PerformerFilterType.Url, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetUrl() *StringCriterionInput { return v.Url }

// GetWeight returns PerformerFilterType.Weight, and is useful for accessing the field via an interface.
func (v *PerformerFilterType) GetWeight() *IntCriterionInput { return v.Weight }

type PhashDistanceCriterionInput struct {
	Distance *int              `json:"distance"`
	Modifier CriterionModifier `json:"modifier"`
	Value    string            `json:"value"`
}

// GetDistance returns PhashDistanceCriterionInput.Distance, and is useful for accessing the field via an interface.
func (v *PhashDistanceCriterionInput) GetDistance() *int { return v.Distance }

// GetModifier returns PhashDistanceCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *PhashDistanceCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns PhashDistanceCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *PhashDistanceCriterionInput) GetValue() string { return v.Value }

type ResolutionCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    ResolutionEnum    `json:"value"`
}

// GetModifier returns ResolutionCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *ResolutionCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns ResolutionCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *ResolutionCriterionInput) GetValue() ResolutionEnum { return v.Value }

type ResolutionEnum string

const (
	// 8K
	ResolutionEnumEightK ResolutionEnum = "EIGHT_K"
	// 5K
	ResolutionEnumFiveK ResolutionEnum = "FIVE_K"
	// 4K
	ResolutionEnumFourK ResolutionEnum = "FOUR_K"
	// 1080p
	ResolutionEnumFullHd ResolutionEnum = "FULL_HD"
	// 8K+
	ResolutionEnumHuge ResolutionEnum = "HUGE"
	// 240p
	ResolutionEnumLow ResolutionEnum = "LOW"
	// 1440p
	ResolutionEnumQuadHd ResolutionEnum = "QUAD_HD"
	// 360p
	ResolutionEnumR360p ResolutionEnum = "R360P"
	// 7K
	ResolutionEnumSevenK ResolutionEnum = "SEVEN_K"
	// 6K
	ResolutionEnumSixK ResolutionEnum = "SIX_K"
	// 480p
	ResolutionEnumStandard ResolutionEnum = "STANDARD"
	// 720p
	ResolutionEnumStandardHd ResolutionEnum = "STANDARD_HD"
	// 144p
	ResolutionEnumVeryLow ResolutionEnum = "VERY_LOW"
	// 1920p
	ResolutionEnumVrHd ResolutionEnum = "VR_HD"
	// 540p
	ResolutionEnumWebHd ResolutionEnum = "WEB_HD"
)

var AllResolutionEnum = []ResolutionEnum{
	ResolutionEnumEightK,
	ResolutionEnumFiveK,
	ResolutionEnumFourK,
	ResolutionEnumFullHd,
	ResolutionEnumHuge,
	ResolutionEnumLow,
	ResolutionEnumQuadHd,
	ResolutionEnumR360p,
	ResolutionEnumSevenK,
	ResolutionEnumSixK,
	ResolutionEnumStandard,
	ResolutionEnumStandardHd,
	ResolutionEnumVeryLow,
	ResolutionEnumVrHd,
	ResolutionEnumWebHd,
}

// SavedFilterParts includes the GraphQL fields of SavedFilter requested by the fragment SavedFilterParts.
type SavedFilterParts struct {
	Id            string                                          `json:"id"`
	Name          string                                          `json:"name"`
	Mode          FilterMode                                      `json:"mode"`
	Find_filter   *SavedFilterPartsFind_filterSavedFindFilterType `json:"find_filter"`
	Object_filter *map[string]interface{}                         `json:"object_filter"`
}

// GetId returns SavedFilterParts.Id, and is useful for accessing the field via an interface.
func (v *SavedFilterParts) GetId() string { return v.Id }

// GetName returns SavedFilterParts.Name, and is useful for accessing the field via an interface.
func (v *SavedFilterParts) GetName() string { return v.Name }

// GetMode returns SavedFilterParts.Mode, and is useful for accessing the field via an interface.
func (v *SavedFilterParts) GetMode() FilterMode { return v.Mode }

// GetFind_filter returns SavedFilterParts.Find_filter, and is useful for accessing the field via an interface.
func (v *SavedFilterParts) GetFind_filter() *SavedFilterPartsFind_filterSavedFindFilterType {
	return v.Find_filter
}

// GetObject_filter returns SavedFilterParts.Object_filter, and is useful for accessing the field via an interface.
func (v *SavedFilterParts) GetObject_filter() *map[string]interface{} { return v.Object_filter }

// SavedFilterPartsFind_filterSavedFindFilterType includes the requested fields of the GraphQL type SavedFindFilterType.
type SavedFilterPartsFind_filterSavedFindFilterType struct {
	Sort      *string            `json:"sort"`
	Direction *SortDirectionEnum `json:"direction"`
}

// GetSort returns SavedFilterPartsFind_filterSavedFindFilterType.Sort, and is useful for accessing the field via an interface.
func (v *SavedFilterPartsFind_filterSavedFindFilterType) GetSort() *string { return v.Sort }

// GetDirection returns SavedFilterPartsFind_filterSavedFindFilterType.Direction, and is useful for accessing the field via an interface.
func (v *SavedFilterPartsFind_filterSavedFindFilterType) GetDirection() *SortDirectionEnum {
	return v.Direction
}

// SceneAddPlayDurationSecondsResponse is returned by SceneAddPlayDurationSeconds on success.
type SceneAddPlayDurationSecondsResponse struct {
	// Sets the resume time point (if provided) and adds the provided duration to the scene's play duration
	SceneSaveActivity bool `json:"sceneSaveActivity"`
}

// GetSceneSaveActivity returns SceneAddPlayDurationSecondsResponse.SceneSaveActivity, and is useful for accessing the field via an interface.
func (v *SceneAddPlayDurationSecondsResponse) GetSceneSaveActivity() bool { return v.SceneSaveActivity }

// SceneDecrementOResponse is returned by SceneDecrementO on success.
type SceneDecrementOResponse struct {
	// Decrements the o-counter for a scene, removing the last recorded time if specific time not provided. Returns the new value
	SceneDeleteO *SceneDecrementOSceneDeleteOHistoryMutationResult `json:"sceneDeleteO"`
}

// GetSceneDeleteO returns SceneDecrementOResponse.SceneDeleteO, and is useful for accessing the field via an interface.
func (v *SceneDecrementOResponse) GetSceneDeleteO() *SceneDecrementOSceneDeleteOHistoryMutationResult {
	return v.SceneDeleteO
}

// SceneDecrementOSceneDeleteOHistoryMutationResult includes the requested fields of the GraphQL type HistoryMutationResult.
type SceneDecrementOSceneDeleteOHistoryMutationResult struct {
	Count int `json:"count"`
}

// GetCount returns SceneDecrementOSceneDeleteOHistoryMutationResult.Count, and is useful for accessing the field via an interface.
func (v *SceneDecrementOSceneDeleteOHistoryMutationResult) GetCount() int { return v.Count }

// SceneDecrementPlayCountResponse is returned by SceneDecrementPlayCount on success.
type SceneDecrementPlayCountResponse struct {
	// Decrements the play count for the scene, removing the specific times or the last recorded time if not provided.
	SceneDeletePlay *SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult `json:"sceneDeletePlay"`
}

// GetSceneDeletePlay returns SceneDecrementPlayCountResponse.SceneDeletePlay, and is useful for accessing the field via an interface.
func (v *SceneDecrementPlayCountResponse) GetSceneDeletePlay() *SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult {
	return v.SceneDeletePlay
}

// SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult includes the requested fields of the GraphQL type HistoryMutationResult.
type SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult struct {
	Count int `json:"count"`
}

// GetCount returns SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult.Count, and is useful for accessing the field via an interface.
func (v *SceneDecrementPlayCountSceneDeletePlayHistoryMutationResult) GetCount() int { return v.Count }

// SceneDestroyResponse is returned by SceneDestroy on success.
type SceneDestroyResponse struct {
	SceneDestroy bool `json:"sceneDestroy"`
}

// GetSceneDestroy returns SceneDestroyResponse.SceneDestroy, and is useful for accessing the field via an interface.
func (v *SceneDestroyResponse) GetSceneDestroy() bool { return v.SceneDestroy }

type SceneFilterType struct {
	AND *SceneFilterType `json:"AND,omitempty"`
	NOT *SceneFilterType `json:"NOT,omitempty"`
	OR  *SceneFilterType `json:"OR,omitempty"`
	// Filter by audio codec
	Audio_codec *StringCriterionInput `json:"audio_codec,omitempty"`
	// Filter by bit rate
	Bitrate *IntCriterionInput `json:"bitrate,omitempty"`
	// Filter by captions
	Captions *StringCriterionInput `json:"captions,omitempty"`
	// Filter by file checksum
	Checksum *StringCriterionInput `json:"checksum,omitempty"`
	Code     *StringCriterionInput `json:"code,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by date
	Date     *DateCriterionInput   `json:"date,omitempty"`
	Details  *StringCriterionInput `json:"details,omitempty"`
	Director *StringCriterionInput `json:"director,omitempty"`
	// Filter Scenes that have an exact phash match available
	Duplicated *PHashDuplicationCriterionInput `json:"duplicated,omitempty"`
	// Filter by duration (in seconds)
	Duration *IntCriterionInput `json:"duration,omitempty"`
	// Filter by file count
	File_count *IntCriterionInput `json:"file_count,omitempty"`
	// Filter by frame rate
	Framerate *IntCriterionInput `json:"framerate,omitempty"`
	// Filter to only include scenes with this gallery
	Galleries *MultiCriterionInput `json:"galleries,omitempty"`
	// Filter by related galleries that meet this criteria
	Galleries_filter *GalleryFilterType `json:"galleries_filter,omitempty"`
	// Filter to only include scenes with this group
	Groups *HierarchicalMultiCriterionInput `json:"groups,omitempty"`
	// Filter by related groups that meet this criteria
	Groups_filter *GroupFilterType `json:"groups_filter,omitempty"`
	// Filter to only include scenes which have markers. `true` or `false`
	Has_markers *string            `json:"has_markers"`
	Id          *IntCriterionInput `json:"id,omitempty"`
	// Filter by interactive
	Interactive *bool `json:"interactive"`
	// Filter by InteractiveSpeed
	Interactive_speed *IntCriterionInput `json:"interactive_speed,omitempty"`
	// Filter to only include scenes missing this property
	Is_missing *string `json:"is_missing"`
	// Filter by scene last played time
	Last_played_at *TimestampCriterionInput `json:"last_played_at,omitempty"`
	// Filter by related markers that meet this criteria
	Markers_filter *SceneMarkerFilterType `json:"markers_filter,omitempty"`
	// Filter to only include scenes with this movie
	Movies *MultiCriterionInput `json:"movies,omitempty"`
	// Filter by related movies that meet this criteria
	Movies_filter *MovieFilterType `json:"movies_filter,omitempty"`
	// Filter by o-counter
	O_counter *IntCriterionInput `json:"o_counter,omitempty"`
	// Filter by organized
	Organized *bool `json:"organized"`
	// Filter by orientation
	Orientation *OrientationCriterionInput `json:"orientation,omitempty"`
	// Filter by file oshash
	Oshash *StringCriterionInput `json:"oshash,omitempty"`
	// Filter by path
	Path *StringCriterionInput `json:"path,omitempty"`
	// Filter scenes by performer age at time of scene
	Performer_age *IntCriterionInput `json:"performer_age,omitempty"`
	// Filter by performer count
	Performer_count *IntCriterionInput `json:"performer_count,omitempty"`
	// Filter scenes that have performers that have been favorited
	Performer_favorite *bool `json:"performer_favorite"`
	// Filter to only include scenes with performers with these tags
	Performer_tags *HierarchicalMultiCriterionInput `json:"performer_tags,omitempty"`
	// Filter to only include scenes with these performers
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	// Filter by related performers that meet this criteria
	Performers_filter *PerformerFilterType `json:"performers_filter,omitempty"`
	// Filter by file phash
	Phash *StringCriterionInput `json:"phash,omitempty"`
	// Filter by file phash distance
	Phash_distance *PhashDistanceCriterionInput `json:"phash_distance,omitempty"`
	// Filter by play count
	Play_count *IntCriterionInput `json:"play_count,omitempty"`
	// Filter by play duration (in seconds)
	Play_duration *IntCriterionInput `json:"play_duration,omitempty"`
	Rating100     *IntCriterionInput `json:"rating100,omitempty"`
	// Filter by resolution
	Resolution *ResolutionCriterionInput `json:"resolution,omitempty"`
	// Filter by resume time
	Resume_time *IntCriterionInput `json:"resume_time,omitempty"`
	// Filter by StashID
	Stash_id_endpoint *StashIDCriterionInput `json:"stash_id_endpoint,omitempty"`
	// Filter to only include scenes with this studio
	Studios *HierarchicalMultiCriterionInput `json:"studios,omitempty"`
	// Filter by related studios that meet this criteria
	Studios_filter *StudioFilterType `json:"studios_filter,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include scenes with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by related tags that meet this criteria
	Tags_filter *TagFilterType        `json:"tags_filter,omitempty"`
	Title       *StringCriterionInput `json:"title,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
	// Filter by video codec
	Video_codec *StringCriterionInput `json:"video_codec,omitempty"`
}

// GetAND returns SceneFilterType.AND, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetAND() *SceneFilterType { return v.AND }

// GetNOT returns SceneFilterType.NOT, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetNOT() *SceneFilterType { return v.NOT }

// GetOR returns SceneFilterType.OR, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetOR() *SceneFilterType { return v.OR }

// GetAudio_codec returns SceneFilterType.Audio_codec, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetAudio_codec() *StringCriterionInput { return v.Audio_codec }

// GetBitrate returns SceneFilterType.Bitrate, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetBitrate() *IntCriterionInput { return v.Bitrate }

// GetCaptions returns SceneFilterType.Captions, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetCaptions() *StringCriterionInput { return v.Captions }

// GetChecksum returns SceneFilterType.Checksum, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetChecksum() *StringCriterionInput { return v.Checksum }

// GetCode returns SceneFilterType.Code, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetCode() *StringCriterionInput { return v.Code }

// GetCreated_at returns SceneFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDate returns SceneFilterType.Date, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetDate() *DateCriterionInput { return v.Date }

// GetDetails returns SceneFilterType.Details, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetDetails() *StringCriterionInput { return v.Details }

// GetDirector returns SceneFilterType.Director, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetDirector() *StringCriterionInput { return v.Director }

// GetDuplicated returns SceneFilterType.Duplicated, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetDuplicated() *PHashDuplicationCriterionInput { return v.Duplicated }

// GetDuration returns SceneFilterType.Duration, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetDuration() *IntCriterionInput { return v.Duration }

// GetFile_count returns SceneFilterType.File_count, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetFile_count() *IntCriterionInput { return v.File_count }

// GetFramerate returns SceneFilterType.Framerate, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetFramerate() *IntCriterionInput { return v.Framerate }

// GetGalleries returns SceneFilterType.Galleries, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetGalleries() *MultiCriterionInput { return v.Galleries }

// GetGalleries_filter returns SceneFilterType.Galleries_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetGalleries_filter() *GalleryFilterType { return v.Galleries_filter }

// GetGroups returns SceneFilterType.Groups, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetGroups() *HierarchicalMultiCriterionInput { return v.Groups }

// GetGroups_filter returns SceneFilterType.Groups_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetGroups_filter() *GroupFilterType { return v.Groups_filter }

// GetHas_markers returns SceneFilterType.Has_markers, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetHas_markers() *string { return v.Has_markers }

// GetId returns SceneFilterType.Id, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetId() *IntCriterionInput { return v.Id }

// GetInteractive returns SceneFilterType.Interactive, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetInteractive() *bool { return v.Interactive }

// GetInteractive_speed returns SceneFilterType.Interactive_speed, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetInteractive_speed() *IntCriterionInput { return v.Interactive_speed }

// GetIs_missing returns SceneFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetIs_missing() *string { return v.Is_missing }

// GetLast_played_at returns SceneFilterType.Last_played_at, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetLast_played_at() *TimestampCriterionInput { return v.Last_played_at }

// GetMarkers_filter returns SceneFilterType.Markers_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetMarkers_filter() *SceneMarkerFilterType { return v.Markers_filter }

// GetMovies returns SceneFilterType.Movies, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetMovies() *MultiCriterionInput { return v.Movies }

// GetMovies_filter returns SceneFilterType.Movies_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetMovies_filter() *MovieFilterType { return v.Movies_filter }

// GetO_counter returns SceneFilterType.O_counter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetO_counter() *IntCriterionInput { return v.O_counter }

// GetOrganized returns SceneFilterType.Organized, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetOrganized() *bool { return v.Organized }

// GetOrientation returns SceneFilterType.Orientation, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetOrientation() *OrientationCriterionInput { return v.Orientation }

// GetOshash returns SceneFilterType.Oshash, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetOshash() *StringCriterionInput { return v.Oshash }

// GetPath returns SceneFilterType.Path, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPath() *StringCriterionInput { return v.Path }

// GetPerformer_age returns SceneFilterType.Performer_age, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformer_age() *IntCriterionInput { return v.Performer_age }

// GetPerformer_count returns SceneFilterType.Performer_count, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformer_count() *IntCriterionInput { return v.Performer_count }

// GetPerformer_favorite returns SceneFilterType.Performer_favorite, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformer_favorite() *bool { return v.Performer_favorite }

// GetPerformer_tags returns SceneFilterType.Performer_tags, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformer_tags() *HierarchicalMultiCriterionInput {
	return v.Performer_tags
}

// GetPerformers returns SceneFilterType.Performers, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetPerformers_filter returns SceneFilterType.Performers_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPerformers_filter() *PerformerFilterType { return v.Performers_filter }

// GetPhash returns SceneFilterType.Phash, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPhash() *StringCriterionInput { return v.Phash }

// GetPhash_distance returns SceneFilterType.Phash_distance, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPhash_distance() *PhashDistanceCriterionInput { return v.Phash_distance }

// GetPlay_count returns SceneFilterType.Play_count, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPlay_count() *IntCriterionInput { return v.Play_count }

// GetPlay_duration returns SceneFilterType.Play_duration, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetPlay_duration() *IntCriterionInput { return v.Play_duration }

// GetRating100 returns SceneFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetResolution returns SceneFilterType.Resolution, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetResolution() *ResolutionCriterionInput { return v.Resolution }

// GetResume_time returns SceneFilterType.Resume_time, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetResume_time() *IntCriterionInput { return v.Resume_time }

// GetStash_id_endpoint returns SceneFilterType.Stash_id_endpoint, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetStash_id_endpoint() *StashIDCriterionInput { return v.Stash_id_endpoint }

// GetStudios returns SceneFilterType.Studios, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetStudios() *HierarchicalMultiCriterionInput { return v.Studios }

// GetStudios_filter returns SceneFilterType.Studios_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetStudios_filter() *StudioFilterType { return v.Studios_filter }

// GetTag_count returns SceneFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns SceneFilterType.Tags, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetTags_filter returns SceneFilterType.Tags_filter, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetTags_filter() *TagFilterType { return v.Tags_filter }

// GetTitle returns SceneFilterType.Title, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetTitle() *StringCriterionInput { return v.Title }

// GetUpdated_at returns SceneFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns SceneFilterType.Url, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetUrl() *StringCriterionInput { return v.Url }

// GetVideo_codec returns SceneFilterType.Video_codec, and is useful for accessing the field via an interface.
func (v *SceneFilterType) GetVideo_codec() *StringCriterionInput { return v.Video_codec }

// SceneIncrementOResponse is returned by SceneIncrementO on success.
type SceneIncrementOResponse struct {
	// Increments the o-counter for a scene. Uses the current time if none provided.
	SceneAddO *SceneIncrementOSceneAddOHistoryMutationResult `json:"sceneAddO"`
}

// GetSceneAddO returns SceneIncrementOResponse.SceneAddO, and is useful for accessing the field via an interface.
func (v *SceneIncrementOResponse) GetSceneAddO() *SceneIncrementOSceneAddOHistoryMutationResult {
	return v.SceneAddO
}

// SceneIncrementOSceneAddOHistoryMutationResult includes the requested fields of the GraphQL type HistoryMutationResult.
type SceneIncrementOSceneAddOHistoryMutationResult struct {
	Count int `json:"count"`
}

// GetCount returns SceneIncrementOSceneAddOHistoryMutationResult.Count, and is useful for accessing the field via an interface.
func (v *SceneIncrementOSceneAddOHistoryMutationResult) GetCount() int { return v.Count }

// SceneIncrementPlayCountResponse is returned by SceneIncrementPlayCount on success.
type SceneIncrementPlayCountResponse struct {
	// Increments the play count for the scene. Uses the current time if none provided.
	SceneAddPlay *SceneIncrementPlayCountSceneAddPlayHistoryMutationResult `json:"sceneAddPlay"`
}

// GetSceneAddPlay returns SceneIncrementPlayCountResponse.SceneAddPlay, and is useful for accessing the field via an interface.
func (v *SceneIncrementPlayCountResponse) GetSceneAddPlay() *SceneIncrementPlayCountSceneAddPlayHistoryMutationResult {
	return v.SceneAddPlay
}

// SceneIncrementPlayCountSceneAddPlayHistoryMutationResult includes the requested fields of the GraphQL type HistoryMutationResult.
type SceneIncrementPlayCountSceneAddPlayHistoryMutationResult struct {
	Count int `json:"count"`
}

// GetCount returns SceneIncrementPlayCountSceneAddPlayHistoryMutationResult.Count, and is useful for accessing the field via an interface.
func (v *SceneIncrementPlayCountSceneAddPlayHistoryMutationResult) GetCount() int { return v.Count }

// SceneMarkerCreateResponse is returned by SceneMarkerCreate on success.
type SceneMarkerCreateResponse struct {
	SceneMarkerCreate *SceneMarkerCreateSceneMarkerCreateSceneMarker `json:"sceneMarkerCreate"`
}

// GetSceneMarkerCreate returns SceneMarkerCreateResponse.SceneMarkerCreate, and is useful for accessing the field via an interface.
func (v *SceneMarkerCreateResponse) GetSceneMarkerCreate() *SceneMarkerCreateSceneMarkerCreateSceneMarker {
	return v.SceneMarkerCreate
}

// SceneMarkerCreateSceneMarkerCreateSceneMarker includes the requested fields of the GraphQL type SceneMarker.
type SceneMarkerCreateSceneMarkerCreateSceneMarker struct {
	Id string `json:"id"`
}

// GetId returns SceneMarkerCreateSceneMarkerCreateSceneMarker.Id, and is useful for accessing the field via an interface.
func (v *SceneMarkerCreateSceneMarkerCreateSceneMarker) GetId() string { return v.Id }

type SceneMarkerFilterType struct {
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by duration (in seconds)
	Duration *FloatCriterionInput `json:"duration,omitempty"`
	// Filter to only include scene markers with these performers
	Performers *MultiCriterionInput `json:"performers,omitempty"`
	// Filter by cscene reation time
	Scene_created_at *TimestampCriterionInput `json:"scene_created_at,omitempty"`
	// Filter by scene date
	Scene_date *DateCriterionInput `json:"scene_date,omitempty"`
	// Filter by related scenes that meet this criteria
	Scene_filter *SceneFilterType `json:"scene_filter,omitempty"`
	// Filter to only include scene markers attached to a scene with these tags
	Scene_tags *HierarchicalMultiCriterionInput `json:"scene_tags,omitempty"`
	// Filter by lscene ast update time
	Scene_updated_at *TimestampCriterionInput `json:"scene_updated_at,omitempty"`
	// Filter to only include scene markers from these scenes
	Scenes *MultiCriterionInput `json:"scenes,omitempty"`
	// Filter to only include scene markers with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
}

// GetCreated_at returns SceneMarkerFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDuration returns SceneMarkerFilterType.Duration, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetDuration() *FloatCriterionInput { return v.Duration }

// GetPerformers returns SceneMarkerFilterType.Performers, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetPerformers() *MultiCriterionInput { return v.Performers }

// GetScene_created_at returns SceneMarkerFilterType.Scene_created_at, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScene_created_at() *TimestampCriterionInput {
	return v.Scene_created_at
}

// GetScene_date returns SceneMarkerFilterType.Scene_date, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScene_date() *DateCriterionInput { return v.Scene_date }

// GetScene_filter returns SceneMarkerFilterType.Scene_filter, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScene_filter() *SceneFilterType { return v.Scene_filter }

// GetScene_tags returns SceneMarkerFilterType.Scene_tags, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScene_tags() *HierarchicalMultiCriterionInput { return v.Scene_tags }

// GetScene_updated_at returns SceneMarkerFilterType.Scene_updated_at, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScene_updated_at() *TimestampCriterionInput {
	return v.Scene_updated_at
}

// GetScenes returns SceneMarkerFilterType.Scenes, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetScenes() *MultiCriterionInput { return v.Scenes }

// GetTags returns SceneMarkerFilterType.Tags, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetUpdated_at returns SceneMarkerFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *SceneMarkerFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// SceneMarkerParts includes the GraphQL fields of SceneMarker requested by the fragment SceneMarkerParts.
type SceneMarkerParts struct {
	Id string `json:"id"`
	// The required start time of the marker (in seconds). Supports decimals.
	Seconds float64 `json:"seconds"`
	// The optional end time of the marker (in seconds). Supports decimals.
	End_seconds *float64                        `json:"end_seconds"`
	Title       string                          `json:"title"`
	Primary_tag *SceneMarkerPartsPrimary_tagTag `json:"primary_tag"`
}

// GetId returns SceneMarkerParts.Id, and is useful for accessing the field via an interface.
func (v *SceneMarkerParts) GetId() string { return v.Id }

// GetSeconds returns SceneMarkerParts.Seconds, and is useful for accessing the field via an interface.
func (v *SceneMarkerParts) GetSeconds() float64 { return v.Seconds }

// GetEnd_seconds returns SceneMarkerParts.End_seconds, and is useful for accessing the field via an interface.
func (v *SceneMarkerParts) GetEnd_seconds() *float64 { return v.End_seconds }

// GetTitle returns SceneMarkerParts.Title, and is useful for accessing the field via an interface.
func (v *SceneMarkerParts) GetTitle() string { return v.Title }

// GetPrimary_tag returns SceneMarkerParts.Primary_tag, and is useful for accessing the field via an interface.
func (v *SceneMarkerParts) GetPrimary_tag() *SceneMarkerPartsPrimary_tagTag { return v.Primary_tag }

// SceneMarkerPartsPrimary_tagTag includes the requested fields of the GraphQL type Tag.
type SceneMarkerPartsPrimary_tagTag struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns SceneMarkerPartsPrimary_tagTag.Id, and is useful for accessing the field via an interface.
func (v *SceneMarkerPartsPrimary_tagTag) GetId() string { return v.Id }

// GetName returns SceneMarkerPartsPrimary_tagTag.Name, and is useful for accessing the field via an interface.
func (v *SceneMarkerPartsPrimary_tagTag) GetName() string { return v.Name }

// SceneMarkerUpdateResponse is returned by SceneMarkerUpdate on success.
type SceneMarkerUpdateResponse struct {
	SceneMarkerUpdate *SceneMarkerUpdateSceneMarkerUpdateSceneMarker `json:"sceneMarkerUpdate"`
}

// GetSceneMarkerUpdate returns SceneMarkerUpdateResponse.SceneMarkerUpdate, and is useful for accessing the field via an interface.
func (v *SceneMarkerUpdateResponse) GetSceneMarkerUpdate() *SceneMarkerUpdateSceneMarkerUpdateSceneMarker {
	return v.SceneMarkerUpdate
}

// SceneMarkerUpdateSceneMarkerUpdateSceneMarker includes the requested fields of the GraphQL type SceneMarker.
type SceneMarkerUpdateSceneMarkerUpdateSceneMarker struct {
	Id string `json:"id"`
}

// GetId returns SceneMarkerUpdateSceneMarkerUpdateSceneMarker.Id, and is useful for accessing the field via an interface.
func (v *SceneMarkerUpdateSceneMarkerUpdateSceneMarker) GetId() string { return v.Id }

// SceneMarkersDestroyResponse is returned by SceneMarkersDestroy on success.
type SceneMarkersDestroyResponse struct {
	SceneMarkersDestroy bool `json:"sceneMarkersDestroy"`
}

// GetSceneMarkersDestroy returns SceneMarkersDestroyResponse.SceneMarkersDestroy, and is useful for accessing the field via an interface.
func (v *SceneMarkersDestroyResponse) GetSceneMarkersDestroy() bool { return v.SceneMarkersDestroy }

// SceneParts includes the GraphQL fields of Scene requested by the fragment SceneParts.
type SceneParts struct {
	Id            string                                `json:"id"`
	Title         *string                               `json:"title"`
	Rating100     *int                                  `json:"rating100"`
	Created_at    time.Time                             `json:"created_at"`
	Date          *string                               `json:"date"`
	Files         []*ScenePartsFilesVideoFile           `json:"files"`
	Studio        *ScenePartsStudio                     `json:"studio"`
	Scene_markers []*ScenePartsScene_markersSceneMarker `json:"scene_markers"`
	Performers    []*ScenePartsPerformersPerformer      `json:"performers"`
	Groups        []*ScenePartsGroupsSceneGroup         `json:"groups"`
	// The number ot times a scene has been played
	Play_count *int                           `json:"play_count"`
	O_counter  *int                           `json:"o_counter"`
	Organized  bool                           `json:"organized"`
	Paths      *ScenePartsPathsScenePathsType `json:"paths"`
	// Return valid stream paths
	SceneStreams  []*ScenePartsSceneStreamsSceneStreamEndpoint `json:"sceneStreams"`
	Captions      []*ScenePartsCaptionsVideoCaption            `json:"captions"`
	Interactive   bool                                         `json:"interactive"`
	TagPartsArray `json:"-"`
}

// GetId returns SceneParts.Id, and is useful for accessing the field via an interface.
func (v *SceneParts) GetId() string { return v.Id }

// GetTitle returns SceneParts.Title, and is useful for accessing the field via an interface.
func (v *SceneParts) GetTitle() *string { return v.Title }

// GetRating100 returns SceneParts.Rating100, and is useful for accessing the field via an interface.
func (v *SceneParts) GetRating100() *int { return v.Rating100 }

// GetCreated_at returns SceneParts.Created_at, and is useful for accessing the field via an interface.
func (v *SceneParts) GetCreated_at() time.Time { return v.Created_at }

// GetDate returns SceneParts.Date, and is useful for accessing the field via an interface.
func (v *SceneParts) GetDate() *string { return v.Date }

// GetFiles returns SceneParts.Files, and is useful for accessing the field via an interface.
func (v *SceneParts) GetFiles() []*ScenePartsFilesVideoFile { return v.Files }

// GetStudio returns SceneParts.Studio, and is useful for accessing the field via an interface.
func (v *SceneParts) GetStudio() *ScenePartsStudio { return v.Studio }

// GetScene_markers returns SceneParts.Scene_markers, and is useful for accessing the field via an interface.
func (v *SceneParts) GetScene_markers() []*ScenePartsScene_markersSceneMarker { return v.Scene_markers }

// GetPerformers returns SceneParts.Performers, and is useful for accessing the field via an interface.
func (v *SceneParts) GetPerformers() []*ScenePartsPerformersPerformer { return v.Performers }

// GetGroups returns SceneParts.Groups, and is useful for accessing the field via an interface.
func (v *SceneParts) GetGroups() []*ScenePartsGroupsSceneGroup { return v.Groups }

// GetPlay_count returns SceneParts.Play_count, and is useful for accessing the field via an interface.
func (v *SceneParts) GetPlay_count() *int { return v.Play_count }

// GetO_counter returns SceneParts.O_counter, and is useful for accessing the field via an interface.
func (v *SceneParts) GetO_counter() *int { return v.O_counter }

// GetOrganized returns SceneParts.Organized, and is useful for accessing the field via an interface.
func (v *SceneParts) GetOrganized() bool { return v.Organized }

// GetPaths returns SceneParts.Paths, and is useful for accessing the field via an interface.
func (v *SceneParts) GetPaths() *ScenePartsPathsScenePathsType { return v.Paths }

// GetSceneStreams returns SceneParts.SceneStreams, and is useful for accessing the field via an interface.
func (v *SceneParts) GetSceneStreams() []*ScenePartsSceneStreamsSceneStreamEndpoint {
	return v.SceneStreams
}

// GetCaptions returns SceneParts.Captions, and is useful for accessing the field via an interface.
func (v *SceneParts) GetCaptions() []*ScenePartsCaptionsVideoCaption { return v.Captions }

// GetInteractive returns SceneParts.Interactive, and is useful for accessing the field via an interface.
func (v *SceneParts) GetInteractive() bool { return v.Interactive }

// GetTags returns SceneParts.Tags, and is useful for accessing the field via an interface.
func (v *SceneParts) GetTags() []*TagPartsArrayTagsTag { return v.TagPartsArray.Tags }

func (v *SceneParts) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SceneParts
		graphql.NoUnmarshalJSON
	}
	firstPass.SceneParts = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagPartsArray)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSceneParts struct {
	Id string `json:"id"`

	Title *string `json:"title"`

	Rating100 *int `json:"rating100"`

	Created_at time.Time `json:"created_at"`

	Date *string `json:"date"`

	Files []*ScenePartsFilesVideoFile `json:"files"`

	Studio *ScenePartsStudio `json:"studio"`

	Scene_markers []*ScenePartsScene_markersSceneMarker `json:"scene_markers"`

	Performers []*ScenePartsPerformersPerformer `json:"performers"`

	Groups []*ScenePartsGroupsSceneGroup `json:"groups"`

	Play_count *int `json:"play_count"`

	O_counter *int `json:"o_counter"`

	Organized bool `json:"organized"`

	Paths *ScenePartsPathsScenePathsType `json:"paths"`

	SceneStreams []*ScenePartsSceneStreamsSceneStreamEndpoint `json:"sceneStreams"`

	Captions []*ScenePartsCaptionsVideoCaption `json:"captions"`

	Interactive bool `json:"interactive"`

	Tags []*TagPartsArrayTagsTag `json:"tags"`
}

func (v *SceneParts) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SceneParts) __premarshalJSON() (*__premarshalSceneParts, error) {
	var retval __premarshalSceneParts

	retval.Id = v.Id
	retval.Title = v.Title
	retval.Rating100 = v.Rating100
	retval.Created_at = v.Created_at
	retval.Date = v.Date
	retval.Files = v.Files
	retval.Studio = v.Studio
	retval.Scene_markers = v.Scene_markers
	retval.Performers = v.Performers
	retval.Groups = v.Groups
	retval.Play_count = v.Play_count
	retval.O_counter = v.O_counter
	retval.Organized = v.Organized
	retval.Paths = v.Paths
	retval.SceneStreams = v.SceneStreams
	retval.Captions = v.Captions
	retval.Interactive = v.Interactive
	retval.Tags = v.TagPartsArray.Tags
	return &retval, nil
}

// ScenePartsCaptionsVideoCaption includes the requested fields of the GraphQL type VideoCaption.
type ScenePartsCaptionsVideoCaption struct {
	Caption_type  string `json:"caption_type"`
	Language_code string `json:"language_code"`
}

// GetCaption_type returns ScenePartsCaptionsVideoCaption.Caption_type, and is useful for accessing the field via an interface.
func (v *ScenePartsCaptionsVideoCaption) GetCaption_type() string { return v.Caption_type }

// GetLanguage_code returns ScenePartsCaptionsVideoCaption.Language_code, and is useful for accessing the field via an interface.
func (v *ScenePartsCaptionsVideoCaption) GetLanguage_code() string { return v.Language_code }

// ScenePartsFilesVideoFile includes the requested fields of the GraphQL type VideoFile.
type ScenePartsFilesVideoFile struct {
	Basename string  `json:"basename"`
	Duration float64 `json:"duration"`
	Path     string  `json:"path"`
	Height   int     `json:"height"`
}

// GetBasename returns ScenePartsFilesVideoFile.Basename, and is useful for accessing the field via an interface.
func (v *ScenePartsFilesVideoFile) GetBasename() string { return v.Basename }

// GetDuration returns ScenePartsFilesVideoFile.Duration, and is useful for accessing the field via an interface.
func (v *ScenePartsFilesVideoFile) GetDuration() float64 { return v.Duration }

// GetPath returns ScenePartsFilesVideoFile.Path, and is useful for accessing the field via an interface.
func (v *ScenePartsFilesVideoFile) GetPath() string { return v.Path }

// GetHeight returns ScenePartsFilesVideoFile.Height, and is useful for accessing the field via an interface.
func (v *ScenePartsFilesVideoFile) GetHeight() int { return v.Height }

// ScenePartsGroupsSceneGroup includes the requested fields of the GraphQL type SceneGroup.
type ScenePartsGroupsSceneGroup struct {
	Group *ScenePartsGroupsSceneGroupGroup `json:"group"`
}

// GetGroup returns ScenePartsGroupsSceneGroup.Group, and is useful for accessing the field via an interface.
func (v *ScenePartsGroupsSceneGroup) GetGroup() *ScenePartsGroupsSceneGroupGroup { return v.Group }

// ScenePartsGroupsSceneGroupGroup includes the requested fields of the GraphQL type Group.
type ScenePartsGroupsSceneGroupGroup struct {
	Name string `json:"name"`
}

// GetName returns ScenePartsGroupsSceneGroupGroup.Name, and is useful for accessing the field via an interface.
func (v *ScenePartsGroupsSceneGroupGroup) GetName() string { return v.Name }

// ScenePartsPathsScenePathsType includes the requested fields of the GraphQL type ScenePathsType.
type ScenePartsPathsScenePathsType struct {
	Screenshot          *string `json:"screenshot"`
	Preview             *string `json:"preview"`
	Stream              *string `json:"stream"`
	Funscript           *string `json:"funscript"`
	Interactive_heatmap *string `json:"interactive_heatmap"`
	Caption             *string `json:"caption"`
}

// GetScreenshot returns ScenePartsPathsScenePathsType.Screenshot, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetScreenshot() *string { return v.Screenshot }

// GetPreview returns ScenePartsPathsScenePathsType.Preview, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetPreview() *string { return v.Preview }

// GetStream returns ScenePartsPathsScenePathsType.Stream, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetStream() *string { return v.Stream }

// GetFunscript returns ScenePartsPathsScenePathsType.Funscript, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetFunscript() *string { return v.Funscript }

// GetInteractive_heatmap returns ScenePartsPathsScenePathsType.Interactive_heatmap, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetInteractive_heatmap() *string {
	return v.Interactive_heatmap
}

// GetCaption returns ScenePartsPathsScenePathsType.Caption, and is useful for accessing the field via an interface.
func (v *ScenePartsPathsScenePathsType) GetCaption() *string { return v.Caption }

// ScenePartsPerformersPerformer includes the requested fields of the GraphQL type Performer.
type ScenePartsPerformersPerformer struct {
	Name string `json:"name"`
}

// GetName returns ScenePartsPerformersPerformer.Name, and is useful for accessing the field via an interface.
func (v *ScenePartsPerformersPerformer) GetName() string { return v.Name }

// ScenePartsSceneStreamsSceneStreamEndpoint includes the requested fields of the GraphQL type SceneStreamEndpoint.
type ScenePartsSceneStreamsSceneStreamEndpoint struct {
	Url       string  `json:"url"`
	Mime_type *string `json:"mime_type"`
	Label     *string `json:"label"`
}

// GetUrl returns ScenePartsSceneStreamsSceneStreamEndpoint.Url, and is useful for accessing the field via an interface.
func (v *ScenePartsSceneStreamsSceneStreamEndpoint) GetUrl() string { return v.Url }

// GetMime_type returns ScenePartsSceneStreamsSceneStreamEndpoint.Mime_type, and is useful for accessing the field via an interface.
func (v *ScenePartsSceneStreamsSceneStreamEndpoint) GetMime_type() *string { return v.Mime_type }

// GetLabel returns ScenePartsSceneStreamsSceneStreamEndpoint.Label, and is useful for accessing the field via an interface.
func (v *ScenePartsSceneStreamsSceneStreamEndpoint) GetLabel() *string { return v.Label }

// ScenePartsScene_markersSceneMarker includes the requested fields of the GraphQL type SceneMarker.
type ScenePartsScene_markersSceneMarker struct {
	SceneMarkerParts `json:"-"`
}

// GetId returns ScenePartsScene_markersSceneMarker.Id, and is useful for accessing the field via an interface.
func (v *ScenePartsScene_markersSceneMarker) GetId() string { return v.SceneMarkerParts.Id }

// GetSeconds returns ScenePartsScene_markersSceneMarker.Seconds, and is useful for accessing the field via an interface.
func (v *ScenePartsScene_markersSceneMarker) GetSeconds() float64 { return v.SceneMarkerParts.Seconds }

// GetEnd_seconds returns ScenePartsScene_markersSceneMarker.End_seconds, and is useful for accessing the field via an interface.
func (v *ScenePartsScene_markersSceneMarker) GetEnd_seconds() *float64 {
	return v.SceneMarkerParts.End_seconds
}

// GetTitle returns ScenePartsScene_markersSceneMarker.Title, and is useful for accessing the field via an interface.
func (v *ScenePartsScene_markersSceneMarker) GetTitle() string { return v.SceneMarkerParts.Title }

// GetPrimary_tag returns ScenePartsScene_markersSceneMarker.Primary_tag, and is useful for accessing the field via an interface.
func (v *ScenePartsScene_markersSceneMarker) GetPrimary_tag() *SceneMarkerPartsPrimary_tagTag {
	return v.SceneMarkerParts.Primary_tag
}

func (v *ScenePartsScene_markersSceneMarker) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScenePartsScene_markersSceneMarker
		graphql.NoUnmarshalJSON
	}
	firstPass.ScenePartsScene_markersSceneMarker = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SceneMarkerParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalScenePartsScene_markersSceneMarker struct {
	Id string `json:"id"`

	Seconds float64 `json:"seconds"`

	End_seconds *float64 `json:"end_seconds"`

	Title string `json:"title"`

	Primary_tag *SceneMarkerPartsPrimary_tagTag `json:"primary_tag"`
}

func (v *ScenePartsScene_markersSceneMarker) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScenePartsScene_markersSceneMarker) __premarshalJSON() (*__premarshalScenePartsScene_markersSceneMarker, error) {
	var retval __premarshalScenePartsScene_markersSceneMarker

	retval.Id = v.SceneMarkerParts.Id
	retval.Seconds = v.SceneMarkerParts.Seconds
	retval.End_seconds = v.SceneMarkerParts.End_seconds
	retval.Title = v.SceneMarkerParts.Title
	retval.Primary_tag = v.SceneMarkerParts.Primary_tag
	return &retval, nil
}

// ScenePartsStudio includes the requested fields of the GraphQL type Studio.
type ScenePartsStudio struct {
	Name string `json:"name"`
}

// GetName returns ScenePartsStudio.Name, and is useful for accessing the field via an interface.
func (v *ScenePartsStudio) GetName() string { return v.Name }

// SceneUpdateOrganizedResponse is returned by SceneUpdateOrganized on success.
type SceneUpdateOrganizedResponse struct {
	SceneUpdate *SceneUpdateOrganizedSceneUpdateScene `json:"sceneUpdate"`
}

// GetSceneUpdate returns SceneUpdateOrganizedResponse.SceneUpdate, and is useful for accessing the field via an interface.
func (v *SceneUpdateOrganizedResponse) GetSceneUpdate() *SceneUpdateOrganizedSceneUpdateScene {
	return v.SceneUpdate
}

// SceneUpdateOrganizedSceneUpdateScene includes the requested fields of the GraphQL type Scene.
type SceneUpdateOrganizedSceneUpdateScene struct {
	Id        string `json:"id"`
	Organized bool   `json:"organized"`
}

// GetId returns SceneUpdateOrganizedSceneUpdateScene.Id, and is useful for accessing the field via an interface.
func (v *SceneUpdateOrganizedSceneUpdateScene) GetId() string { return v.Id }

// GetOrganized returns SceneUpdateOrganizedSceneUpdateScene.Organized, and is useful for accessing the field via an interface.
func (v *SceneUpdateOrganizedSceneUpdateScene) GetOrganized() bool { return v.Organized }

// SceneUpdateRating100Response is returned by SceneUpdateRating100 on success.
type SceneUpdateRating100Response struct {
	SceneUpdate *SceneUpdateRating100SceneUpdateScene `json:"sceneUpdate"`
}

// GetSceneUpdate returns SceneUpdateRating100Response.SceneUpdate, and is useful for accessing the field via an interface.
func (v *SceneUpdateRating100Response) GetSceneUpdate() *SceneUpdateRating100SceneUpdateScene {
	return v.SceneUpdate
}

// SceneUpdateRating100SceneUpdateScene includes the requested fields of the GraphQL type Scene.
type SceneUpdateRating100SceneUpdateScene struct {
	Id string `json:"id"`
}

// GetId returns SceneUpdateRating100SceneUpdateScene.Id, and is useful for accessing the field via an interface.
func (v *SceneUpdateRating100SceneUpdateScene) GetId() string { return v.Id }

// SceneUpdateTagsResponse is returned by SceneUpdateTags on success.
type SceneUpdateTagsResponse struct {
	SceneUpdate *SceneUpdateTagsSceneUpdateScene `json:"sceneUpdate"`
}

// GetSceneUpdate returns SceneUpdateTagsResponse.SceneUpdate, and is useful for accessing the field via an interface.
func (v *SceneUpdateTagsResponse) GetSceneUpdate() *SceneUpdateTagsSceneUpdateScene {
	return v.SceneUpdate
}

// SceneUpdateTagsSceneUpdateScene includes the requested fields of the GraphQL type Scene.
type SceneUpdateTagsSceneUpdateScene struct {
	Id string `json:"id"`
}

// GetId returns SceneUpdateTagsSceneUpdateScene.Id, and is useful for accessing the field via an interface.
func (v *SceneUpdateTagsSceneUpdateScene) GetId() string { return v.Id }

type SortDirectionEnum string

const (
	SortDirectionEnumAsc  SortDirectionEnum = "ASC"
	SortDirectionEnumDesc SortDirectionEnum = "DESC"
)

var AllSortDirectionEnum = []SortDirectionEnum{
	SortDirectionEnumAsc,
	SortDirectionEnumDesc,
}

type StashIDCriterionInput struct {
	// If present, this value is treated as a predicate.
	// That is, it will filter based on stash_ids with the matching endpoint
	Endpoint *string           `json:"endpoint"`
	Modifier CriterionModifier `json:"modifier"`
	Stash_id *string           `json:"stash_id"`
}

// GetEndpoint returns StashIDCriterionInput.Endpoint, and is useful for accessing the field via an interface.
func (v *StashIDCriterionInput) GetEndpoint() *string { return v.Endpoint }

// GetModifier returns StashIDCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *StashIDCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetStash_id returns StashIDCriterionInput.Stash_id, and is useful for accessing the field via an interface.
func (v *StashIDCriterionInput) GetStash_id() *string { return v.Stash_id }

type StringCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    string            `json:"value"`
}

// GetModifier returns StringCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *StringCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns StringCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *StringCriterionInput) GetValue() string { return v.Value }

type StudioFilterType struct {
	AND *StudioFilterType `json:"AND,omitempty"`
	NOT *StudioFilterType `json:"NOT,omitempty"`
	OR  *StudioFilterType `json:"OR,omitempty"`
	// Filter by studio aliases
	Aliases *StringCriterionInput `json:"aliases,omitempty"`
	// Filter by subsidiary studio count
	Child_count *IntCriterionInput `json:"child_count,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	Details    *StringCriterionInput    `json:"details,omitempty"`
	// Filter by favorite
	Favorite *bool `json:"favorite"`
	// Filter by related galleries that meet this criteria
	Galleries_filter *GalleryFilterType `json:"galleries_filter,omitempty"`
	// Filter by gallery count
	Gallery_count *IntCriterionInput `json:"gallery_count,omitempty"`
	// Filter by autotag ignore value
	Ignore_auto_tag *bool `json:"ignore_auto_tag"`
	// Filter by image count
	Image_count *IntCriterionInput `json:"image_count,omitempty"`
	// Filter by related images that meet this criteria
	Images_filter *ImageFilterType `json:"images_filter,omitempty"`
	// Filter to only include studios missing this property
	Is_missing *string               `json:"is_missing"`
	Name       *StringCriterionInput `json:"name,omitempty"`
	// Filter to only include studios with this parent studio
	Parents   *MultiCriterionInput `json:"parents,omitempty"`
	Rating100 *IntCriterionInput   `json:"rating100,omitempty"`
	// Filter by scene count
	Scene_count *IntCriterionInput `json:"scene_count,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter by StashID
	Stash_id_endpoint *StashIDCriterionInput `json:"stash_id_endpoint,omitempty"`
	// Filter by tag count
	Tag_count *IntCriterionInput `json:"tag_count,omitempty"`
	// Filter to only include studios with these tags
	Tags *HierarchicalMultiCriterionInput `json:"tags,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
	// Filter by url
	Url *StringCriterionInput `json:"url,omitempty"`
}

// GetAND returns StudioFilterType.AND, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetAND() *StudioFilterType { return v.AND }

// GetNOT returns StudioFilterType.NOT, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetNOT() *StudioFilterType { return v.NOT }

// GetOR returns StudioFilterType.OR, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetOR() *StudioFilterType { return v.OR }

// GetAliases returns StudioFilterType.Aliases, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetAliases() *StringCriterionInput { return v.Aliases }

// GetChild_count returns StudioFilterType.Child_count, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetChild_count() *IntCriterionInput { return v.Child_count }

// GetCreated_at returns StudioFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDetails returns StudioFilterType.Details, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetDetails() *StringCriterionInput { return v.Details }

// GetFavorite returns StudioFilterType.Favorite, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetFavorite() *bool { return v.Favorite }

// GetGalleries_filter returns StudioFilterType.Galleries_filter, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetGalleries_filter() *GalleryFilterType { return v.Galleries_filter }

// GetGallery_count returns StudioFilterType.Gallery_count, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetGallery_count() *IntCriterionInput { return v.Gallery_count }

// GetIgnore_auto_tag returns StudioFilterType.Ignore_auto_tag, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetIgnore_auto_tag() *bool { return v.Ignore_auto_tag }

// GetImage_count returns StudioFilterType.Image_count, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetImage_count() *IntCriterionInput { return v.Image_count }

// GetImages_filter returns StudioFilterType.Images_filter, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetImages_filter() *ImageFilterType { return v.Images_filter }

// GetIs_missing returns StudioFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetIs_missing() *string { return v.Is_missing }

// GetName returns StudioFilterType.Name, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetName() *StringCriterionInput { return v.Name }

// GetParents returns StudioFilterType.Parents, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetParents() *MultiCriterionInput { return v.Parents }

// GetRating100 returns StudioFilterType.Rating100, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetRating100() *IntCriterionInput { return v.Rating100 }

// GetScene_count returns StudioFilterType.Scene_count, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetScene_count() *IntCriterionInput { return v.Scene_count }

// GetScenes_filter returns StudioFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetStash_id_endpoint returns StudioFilterType.Stash_id_endpoint, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetStash_id_endpoint() *StashIDCriterionInput { return v.Stash_id_endpoint }

// GetTag_count returns StudioFilterType.Tag_count, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetTag_count() *IntCriterionInput { return v.Tag_count }

// GetTags returns StudioFilterType.Tags, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetTags() *HierarchicalMultiCriterionInput { return v.Tags }

// GetUpdated_at returns StudioFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// GetUrl returns StudioFilterType.Url, and is useful for accessing the field via an interface.
func (v *StudioFilterType) GetUrl() *StringCriterionInput { return v.Url }

// TagCreateResponse is returned by TagCreate on success.
type TagCreateResponse struct {
	TagCreate *TagCreateTagCreateTag `json:"tagCreate"`
}

// GetTagCreate returns TagCreateResponse.TagCreate, and is useful for accessing the field via an interface.
func (v *TagCreateResponse) GetTagCreate() *TagCreateTagCreateTag { return v.TagCreate }

// TagCreateTagCreateTag includes the requested fields of the GraphQL type Tag.
type TagCreateTagCreateTag struct {
	Id string `json:"id"`
}

// GetId returns TagCreateTagCreateTag.Id, and is useful for accessing the field via an interface.
func (v *TagCreateTagCreateTag) GetId() string { return v.Id }

type TagFilterType struct {
	AND *TagFilterType `json:"AND,omitempty"`
	NOT *TagFilterType `json:"NOT,omitempty"`
	OR  *TagFilterType `json:"OR,omitempty"`
	// Filter by tag aliases
	Aliases *StringCriterionInput `json:"aliases,omitempty"`
	// Filter by number f child tags the tag has
	Child_count *IntCriterionInput `json:"child_count,omitempty"`
	// Filter by child tags
	Children *HierarchicalMultiCriterionInput `json:"children,omitempty"`
	// Filter by creation time
	Created_at *TimestampCriterionInput `json:"created_at,omitempty"`
	// Filter by tag description
	Description *StringCriterionInput `json:"description,omitempty"`
	// Filter by favorite
	Favorite *bool `json:"favorite"`
	// Filter by related galleries that meet this criteria
	Galleries_filter *GalleryFilterType `json:"galleries_filter,omitempty"`
	// Filter by number of galleries with this tag
	Gallery_count *IntCriterionInput `json:"gallery_count,omitempty"`
	// Filter by number of group with this tag
	Group_count *IntCriterionInput `json:"group_count,omitempty"`
	// Filter by autotag ignore value
	Ignore_auto_tag *bool `json:"ignore_auto_tag"`
	// Filter by number of images with this tag
	Image_count *IntCriterionInput `json:"image_count,omitempty"`
	// Filter by related images that meet this criteria
	Images_filter *ImageFilterType `json:"images_filter,omitempty"`
	// Filter to only include tags missing this property
	Is_missing *string `json:"is_missing"`
	// Filter by number of markers with this tag
	Marker_count *IntCriterionInput `json:"marker_count,omitempty"`
	// Filter by number of movies with this tag
	Movie_count *IntCriterionInput `json:"movie_count,omitempty"`
	// Filter by tag name
	Name *StringCriterionInput `json:"name,omitempty"`
	// Filter by number of parent tags the tag has
	Parent_count *IntCriterionInput `json:"parent_count,omitempty"`
	// Filter by parent tags
	Parents *HierarchicalMultiCriterionInput `json:"parents,omitempty"`
	// Filter by number of performers with this tag
	Performer_count *IntCriterionInput `json:"performer_count,omitempty"`
	// Filter by number of scenes with this tag
	Scene_count *IntCriterionInput `json:"scene_count,omitempty"`
	// Filter by related scenes that meet this criteria
	Scenes_filter *SceneFilterType `json:"scenes_filter,omitempty"`
	// Filter by tag sort_name
	Sort_name *StringCriterionInput `json:"sort_name,omitempty"`
	// Filter by number of studios with this tag
	Studio_count *IntCriterionInput `json:"studio_count,omitempty"`
	// Filter by last update time
	Updated_at *TimestampCriterionInput `json:"updated_at,omitempty"`
}

// GetAND returns TagFilterType.AND, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetAND() *TagFilterType { return v.AND }

// GetNOT returns TagFilterType.NOT, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetNOT() *TagFilterType { return v.NOT }

// GetOR returns TagFilterType.OR, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetOR() *TagFilterType { return v.OR }

// GetAliases returns TagFilterType.Aliases, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetAliases() *StringCriterionInput { return v.Aliases }

// GetChild_count returns TagFilterType.Child_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetChild_count() *IntCriterionInput { return v.Child_count }

// GetChildren returns TagFilterType.Children, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetChildren() *HierarchicalMultiCriterionInput { return v.Children }

// GetCreated_at returns TagFilterType.Created_at, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetCreated_at() *TimestampCriterionInput { return v.Created_at }

// GetDescription returns TagFilterType.Description, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetDescription() *StringCriterionInput { return v.Description }

// GetFavorite returns TagFilterType.Favorite, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetFavorite() *bool { return v.Favorite }

// GetGalleries_filter returns TagFilterType.Galleries_filter, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetGalleries_filter() *GalleryFilterType { return v.Galleries_filter }

// GetGallery_count returns TagFilterType.Gallery_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetGallery_count() *IntCriterionInput { return v.Gallery_count }

// GetGroup_count returns TagFilterType.Group_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetGroup_count() *IntCriterionInput { return v.Group_count }

// GetIgnore_auto_tag returns TagFilterType.Ignore_auto_tag, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetIgnore_auto_tag() *bool { return v.Ignore_auto_tag }

// GetImage_count returns TagFilterType.Image_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetImage_count() *IntCriterionInput { return v.Image_count }

// GetImages_filter returns TagFilterType.Images_filter, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetImages_filter() *ImageFilterType { return v.Images_filter }

// GetIs_missing returns TagFilterType.Is_missing, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetIs_missing() *string { return v.Is_missing }

// GetMarker_count returns TagFilterType.Marker_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetMarker_count() *IntCriterionInput { return v.Marker_count }

// GetMovie_count returns TagFilterType.Movie_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetMovie_count() *IntCriterionInput { return v.Movie_count }

// GetName returns TagFilterType.Name, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetName() *StringCriterionInput { return v.Name }

// GetParent_count returns TagFilterType.Parent_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetParent_count() *IntCriterionInput { return v.Parent_count }

// GetParents returns TagFilterType.Parents, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetParents() *HierarchicalMultiCriterionInput { return v.Parents }

// GetPerformer_count returns TagFilterType.Performer_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetPerformer_count() *IntCriterionInput { return v.Performer_count }

// GetScene_count returns TagFilterType.Scene_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetScene_count() *IntCriterionInput { return v.Scene_count }

// GetScenes_filter returns TagFilterType.Scenes_filter, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetScenes_filter() *SceneFilterType { return v.Scenes_filter }

// GetSort_name returns TagFilterType.Sort_name, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetSort_name() *StringCriterionInput { return v.Sort_name }

// GetStudio_count returns TagFilterType.Studio_count, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetStudio_count() *IntCriterionInput { return v.Studio_count }

// GetUpdated_at returns TagFilterType.Updated_at, and is useful for accessing the field via an interface.
func (v *TagFilterType) GetUpdated_at() *TimestampCriterionInput { return v.Updated_at }

// TagParts includes the GraphQL fields of Tag requested by the fragment TagParts.
type TagParts struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// Value that does not appear in the UI but overrides name for sorting
	Sort_name *string               `json:"sort_name"`
	Parents   []*TagPartsParentsTag `json:"parents"`
}

// GetId returns TagParts.Id, and is useful for accessing the field via an interface.
func (v *TagParts) GetId() string { return v.Id }

// GetName returns TagParts.Name, and is useful for accessing the field via an interface.
func (v *TagParts) GetName() string { return v.Name }

// GetSort_name returns TagParts.Sort_name, and is useful for accessing the field via an interface.
func (v *TagParts) GetSort_name() *string { return v.Sort_name }

// GetParents returns TagParts.Parents, and is useful for accessing the field via an interface.
func (v *TagParts) GetParents() []*TagPartsParentsTag { return v.Parents }

// TagPartsArray includes the GraphQL fields of Scene requested by the fragment TagPartsArray.
type TagPartsArray struct {
	Tags []*TagPartsArrayTagsTag `json:"tags"`
}

// GetTags returns TagPartsArray.Tags, and is useful for accessing the field via an interface.
func (v *TagPartsArray) GetTags() []*TagPartsArrayTagsTag { return v.Tags }

// TagPartsArrayTagsTag includes the requested fields of the GraphQL type Tag.
type TagPartsArrayTagsTag struct {
	TagParts `json:"-"`
}

// GetId returns TagPartsArrayTagsTag.Id, and is useful for accessing the field via an interface.
func (v *TagPartsArrayTagsTag) GetId() string { return v.TagParts.Id }

// GetName returns TagPartsArrayTagsTag.Name, and is useful for accessing the field via an interface.
func (v *TagPartsArrayTagsTag) GetName() string { return v.TagParts.Name }

// GetSort_name returns TagPartsArrayTagsTag.Sort_name, and is useful for accessing the field via an interface.
func (v *TagPartsArrayTagsTag) GetSort_name() *string { return v.TagParts.Sort_name }

// GetParents returns TagPartsArrayTagsTag.Parents, and is useful for accessing the field via an interface.
func (v *TagPartsArrayTagsTag) GetParents() []*TagPartsParentsTag { return v.TagParts.Parents }

func (v *TagPartsArrayTagsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TagPartsArrayTagsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.TagPartsArrayTagsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTagPartsArrayTagsTag struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Sort_name *string `json:"sort_name"`

	Parents []*TagPartsParentsTag `json:"parents"`
}

func (v *TagPartsArrayTagsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TagPartsArrayTagsTag) __premarshalJSON() (*__premarshalTagPartsArrayTagsTag, error) {
	var retval __premarshalTagPartsArrayTagsTag

	retval.Id = v.TagParts.Id
	retval.Name = v.TagParts.Name
	retval.Sort_name = v.TagParts.Sort_name
	retval.Parents = v.TagParts.Parents
	return &retval, nil
}

// TagPartsParentsTag includes the requested fields of the GraphQL type Tag.
type TagPartsParentsTag struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// Value that does not appear in the UI but overrides name for sorting
	Sort_name *string `json:"sort_name"`
}

// GetId returns TagPartsParentsTag.Id, and is useful for accessing the field via an interface.
func (v *TagPartsParentsTag) GetId() string { return v.Id }

// GetName returns TagPartsParentsTag.Name, and is useful for accessing the field via an interface.
func (v *TagPartsParentsTag) GetName() string { return v.Name }

// GetSort_name returns TagPartsParentsTag.Sort_name, and is useful for accessing the field via an interface.
func (v *TagPartsParentsTag) GetSort_name() *string { return v.Sort_name }

type TimestampCriterionInput struct {
	Modifier CriterionModifier `json:"modifier"`
	Value    string            `json:"value"`
	Value2   *string           `json:"value2"`
}

// GetModifier returns TimestampCriterionInput.Modifier, and is useful for accessing the field via an interface.
func (v *TimestampCriterionInput) GetModifier() CriterionModifier { return v.Modifier }

// GetValue returns TimestampCriterionInput.Value, and is useful for accessing the field via an interface.
func (v *TimestampCriterionInput) GetValue() string { return v.Value }

// GetValue2 returns TimestampCriterionInput.Value2, and is useful for accessing the field via an interface.
func (v *TimestampCriterionInput) GetValue2() *string { return v.Value2 }

// UIConfigurationConfigurationConfigResult includes the requested fields of the GraphQL type ConfigResult.
// The GraphQL type's documentation follows.
//
// All configuration settings
type UIConfigurationConfigurationConfigResult struct {
	Ui map[string]interface{} `json:"ui"`
}

// GetUi returns UIConfigurationConfigurationConfigResult.Ui, and is useful for accessing the field via an interface.
func (v *UIConfigurationConfigurationConfigResult) GetUi() map[string]interface{} { return v.Ui }

// UIConfigurationResponse is returned by UIConfiguration on success.
type UIConfigurationResponse struct {
	// Returns the current, complete configuration
	Configuration *UIConfigurationConfigurationConfigResult `json:"configuration"`
}

// GetConfiguration returns UIConfigurationResponse.Configuration, and is useful for accessing the field via an interface.
func (v *UIConfigurationResponse) GetConfiguration() *UIConfigurationConfigurationConfigResult {
	return v.Configuration
}

// VersionResponse is returned by Version on success.
type VersionResponse struct {
	Version *VersionVersion `json:"version"`
}

// GetVersion returns VersionResponse.Version, and is useful for accessing the field via an interface.
func (v *VersionResponse) GetVersion() *VersionVersion { return v.Version }

// VersionVersion includes the requested fields of the GraphQL type Version.
type VersionVersion struct {
	Version *string `json:"version"`
}

// GetVersion returns VersionVersion.Version, and is useful for accessing the field via an interface.
func (v *VersionVersion) GetVersion() *string { return v.Version }

// __FindPerformerByNameInput is used internally by genqlient
type __FindPerformerByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __FindPerformerByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__FindPerformerByNameInput) GetName() string { return v.Name }

// __FindSceneIdsByFilterInput is used internally by genqlient
type __FindSceneIdsByFilterInput struct {
	Scene_filter *SceneFilterType `json:"scene_filter,omitempty"`
	FilterOpts   *FindFilterType  `json:"filterOpts,omitempty"`
}

// GetScene_filter returns __FindSceneIdsByFilterInput.Scene_filter, and is useful for accessing the field via an interface.
func (v *__FindSceneIdsByFilterInput) GetScene_filter() *SceneFilterType { return v.Scene_filter }

// GetFilterOpts returns __FindSceneIdsByFilterInput.FilterOpts, and is useful for accessing the field via an interface.
func (v *__FindSceneIdsByFilterInput) GetFilterOpts() *FindFilterType { return v.FilterOpts }

// __FindSceneMarkersInput is used internally by genqlient
type __FindSceneMarkersInput struct {
	Scene_id string `json:"scene_id"`
}

// GetScene_id returns __FindSceneMarkersInput.Scene_id, and is useful for accessing the field via an interface.
func (v *__FindSceneMarkersInput) GetScene_id() string { return v.Scene_id }

// __FindSceneTagsInput is used internally by genqlient
type __FindSceneTagsInput struct {
	Scene_id string `json:"scene_id"`
}

// GetScene_id returns __FindSceneTagsInput.Scene_id, and is useful for accessing the field via an interface.
func (v *__FindSceneTagsInput) GetScene_id() string { return v.Scene_id }

// __FindScenesInput is used internally by genqlient
type __FindScenesInput struct {
	Scene_ids []int `json:"scene_ids"`
}

// GetScene_ids returns __FindScenesInput.Scene_ids, and is useful for accessing the field via an interface.
func (v *__FindScenesInput) GetScene_ids() []int { return v.Scene_ids }

// __FindStudioByNameInput is used internally by genqlient
type __FindStudioByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __FindStudioByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__FindStudioByNameInput) GetName() string { return v.Name }

// __FindTagByNameInput is used internally by genqlient
type __FindTagByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __FindTagByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__FindTagByNameInput) GetName() string { return v.Name }

// __FindTagsInput is used internally by genqlient
type __FindTagsInput struct {
	Tag_filter *TagFilterType     `json:"tag_filter,omitempty"`
	Sort       *string            `json:"sort"`
	Direction  *SortDirectionEnum `json:"direction"`
}

// GetTag_filter returns __FindTagsInput.Tag_filter, and is useful for accessing the field via an interface.
func (v *__FindTagsInput) GetTag_filter() *TagFilterType { return v.Tag_filter }

// GetSort returns __FindTagsInput.Sort, and is useful for accessing the field via an interface.
func (v *__FindTagsInput) GetSort() *string { return v.Sort }

// GetDirection returns __FindTagsInput.Direction, and is useful for accessing the field via an interface.
func (v *__FindTagsInput) GetDirection() *SortDirectionEnum { return v.Direction }

// __IsSceneOrganizedInput is used internally by genqlient
type __IsSceneOrganizedInput struct {
	Id *string `json:"id"`
}

// GetId returns __IsSceneOrganizedInput.Id, and is useful for accessing the field via an interface.
func (v *__IsSceneOrganizedInput) GetId() *string { return v.Id }

// __SceneAddPlayDurationSecondsInput is used internally by genqlient
type __SceneAddPlayDurationSecondsInput struct {
	Id      string   `json:"id"`
	Seconds *float64 `json:"seconds"`
}

// GetId returns __SceneAddPlayDurationSecondsInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneAddPlayDurationSecondsInput) GetId() string { return v.Id }

// GetSeconds returns __SceneAddPlayDurationSecondsInput.Seconds, and is useful for accessing the field via an interface.
func (v *__SceneAddPlayDurationSecondsInput) GetSeconds() *float64 { return v.Seconds }

// __SceneDecrementOInput is used internally by genqlient
type __SceneDecrementOInput struct {
	Id string `json:"id"`
}

// GetId returns __SceneDecrementOInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneDecrementOInput) GetId() string { return v.Id }

// __SceneDecrementPlayCountInput is used internally by genqlient
type __SceneDecrementPlayCountInput struct {
	Id string `json:"id"`
}

// GetId returns __SceneDecrementPlayCountInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneDecrementPlayCountInput) GetId() string { return v.Id }

// __SceneDestroyInput is used internally by genqlient
type __SceneDestroyInput struct {
	Id string `json:"id"`
}

// GetId returns __SceneDestroyInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneDestroyInput) GetId() string { return v.Id }

// __SceneIncrementOInput is used internally by genqlient
type __SceneIncrementOInput struct {
	Id string `json:"id"`
}

// GetId returns __SceneIncrementOInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneIncrementOInput) GetId() string { return v.Id }

// __SceneIncrementPlayCountInput is used internally by genqlient
type __SceneIncrementPlayCountInput struct {
	Id string `json:"id"`
}

// GetId returns __SceneIncrementPlayCountInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneIncrementPlayCountInput) GetId() string { return v.Id }

// __SceneMarkerCreateInput is used internally by genqlient
type __SceneMarkerCreateInput struct {
	Scene_id    string   `json:"scene_id"`
	Tag_id      string   `json:"tag_id"`
	Seconds     float64  `json:"seconds"`
	End_seconds *float64 `json:"end_seconds"`
	Title       string   `json:"title"`
}

// GetScene_id returns __SceneMarkerCreateInput.Scene_id, and is useful for accessing the field via an interface.
func (v *__SceneMarkerCreateInput) GetScene_id() string { return v.Scene_id }

// GetTag_id returns __SceneMarkerCreateInput.Tag_id, and is useful for accessing the field via an interface.
func (v *__SceneMarkerCreateInput) GetTag_id() string { return v.Tag_id }

// GetSeconds returns __SceneMarkerCreateInput.Seconds, and is useful for accessing the field via an interface.
func (v *__SceneMarkerCreateInput) GetSeconds() float64 { return v.Seconds }

// GetEnd_seconds returns __SceneMarkerCreateInput.End_seconds, and is useful for accessing the field via an interface.
func (v *__SceneMarkerCreateInput) GetEnd_seconds() *float64 { return v.End_seconds }

// GetTitle returns __SceneMarkerCreateInput.Title, and is useful for accessing the field via an interface.
func (v *__SceneMarkerCreateInput) GetTitle() string { return v.Title }

// __SceneMarkerUpdateInput is used internally by genqlient
type __SceneMarkerUpdateInput struct {
	Id          string   `json:"id"`
	Tag_id      string   `json:"tag_id"`
	Seconds     float64  `json:"seconds"`
	End_seconds *float64 `json:"end_seconds"`
	Title       string   `json:"title"`
}

// GetId returns __SceneMarkerUpdateInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneMarkerUpdateInput) GetId() string { return v.Id }

// GetTag_id returns __SceneMarkerUpdateInput.Tag_id, and is useful for accessing the field via an interface.
func (v *__SceneMarkerUpdateInput) GetTag_id() string { return v.Tag_id }

// GetSeconds returns __SceneMarkerUpdateInput.Seconds, and is useful for accessing the field via an interface.
func (v *__SceneMarkerUpdateInput) GetSeconds() float64 { return v.Seconds }

// GetEnd_seconds returns __SceneMarkerUpdateInput.End_seconds, and is useful for accessing the field via an interface.
func (v *__SceneMarkerUpdateInput) GetEnd_seconds() *float64 { return v.End_seconds }

// GetTitle returns __SceneMarkerUpdateInput.Title, and is useful for accessing the field via an interface.
func (v *__SceneMarkerUpdateInput) GetTitle() string { return v.Title }

// __SceneMarkersDestroyInput is used internally by genqlient
type __SceneMarkersDestroyInput struct {
	Ids []string `json:"ids"`
}

// GetIds returns __SceneMarkersDestroyInput.Ids, and is useful for accessing the field via an interface.
func (v *__SceneMarkersDestroyInput) GetIds() []string { return v.Ids }

// __SceneUpdateOrganizedInput is used internally by genqlient
type __SceneUpdateOrganizedInput struct {
	Id          string `json:"id"`
	IsOrganized *bool  `json:"isOrganized"`
}

// GetId returns __SceneUpdateOrganizedInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneUpdateOrganizedInput) GetId() string { return v.Id }

// GetIsOrganized returns __SceneUpdateOrganizedInput.IsOrganized, and is useful for accessing the field via an interface.
func (v *__SceneUpdateOrganizedInput) GetIsOrganized() *bool { return v.IsOrganized }

// __SceneUpdateRating100Input is used internally by genqlient
type __SceneUpdateRating100Input struct {
	Id     string `json:"id"`
	Rating *int   `json:"rating"`
}

// GetId returns __SceneUpdateRating100Input.Id, and is useful for accessing the field via an interface.
func (v *__SceneUpdateRating100Input) GetId() string { return v.Id }

// GetRating returns __SceneUpdateRating100Input.Rating, and is useful for accessing the field via an interface.
func (v *__SceneUpdateRating100Input) GetRating() *int { return v.Rating }

// __SceneUpdateTagsInput is used internally by genqlient
type __SceneUpdateTagsInput struct {
	Id      string   `json:"id"`
	Tag_ids []string `json:"tag_ids"`
}

// GetId returns __SceneUpdateTagsInput.Id, and is useful for accessing the field via an interface.
func (v *__SceneUpdateTagsInput) GetId() string { return v.Id }

// GetTag_ids returns __SceneUpdateTagsInput.Tag_ids, and is useful for accessing the field via an interface.
func (v *__SceneUpdateTagsInput) GetTag_ids() []string { return v.Tag_ids }

// __TagCreateInput is used internally by genqlient
type __TagCreateInput struct {
	Name string `json:"name"`
}

// GetName returns __TagCreateInput.Name, and is useful for accessing the field via an interface.
func (v *__TagCreateInput) GetName() string { return v.Name }

// The query executed by FindAllSceneIds.
const FindAllSceneIds_Operation = `
query FindAllSceneIds {
	findScenes(filter: {per_page:-1}) {
		scenes {
			id
		}
	}
}
`

func FindAllSceneIds(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *FindAllSceneIdsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindAllSceneIds",
		Query:  FindAllSceneIds_Operation,
	}

	data_ = &FindAllSceneIdsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindAllTags.
const FindAllTags_Operation = `
query FindAllTags {
	findTags(filter: {per_page:-1}) {
		tags {
			... TagParts
		}
	}
}
fragment TagParts on Tag {
	id
	name
	sort_name
	parents {
		id
		name
		sort_name
	}
}
`

func FindAllTags(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *FindAllTagsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindAllTags",
		Query:  FindAllTags_Operation,
	}

	data_ = &FindAllTagsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindCredentials.
const FindCredentials_Operation = `
query FindCredentials {
	configuration {
		general {
			username
			password
		}
	}
}
`

func FindCredentials(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *FindCredentialsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindCredentials",
		Query:  FindCredentials_Operation,
	}

	data_ = &FindCredentialsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindPerformerByName.
const FindPerformerByName_Operation = `
query FindPerformerByName ($name: String!) {
	findPerformers(performer_filter: {name:{value:$name,modifier:EQUALS}}) {
		performers {
			id
		}
	}
}
`

func FindPerformerByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *FindPerformerByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindPerformerByName",
		Query:  FindPerformerByName_Operation,
		Variables: &__FindPerformerByNameInput{
			Name: name,
		},
	}

	data_ = &FindPerformerByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindSavedSceneFilters.
const FindSavedSceneFilters_Operation = `
query FindSavedSceneFilters {
	findSavedFilters(mode: SCENES) {
		... SavedFilterParts
	}
}
fragment SavedFilterParts on SavedFilter {
	id
	name
	mode
	find_filter {
		sort
		direction
	}
	object_filter
}
`

func FindSavedSceneFilters(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *FindSavedSceneFiltersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindSavedSceneFilters",
		Query:  FindSavedSceneFilters_Operation,
	}

	data_ = &FindSavedSceneFiltersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindSceneIdsByFilter.
const FindSceneIdsByFilter_Operation = `
query FindSceneIdsByFilter ($scene_filter: SceneFilterType, $filterOpts: FindFilterType) {
	findScenes(scene_filter: $scene_filter, filter: $filterOpts) {
		scenes {
			id
		}
	}
}
`

func FindSceneIdsByFilter(
	ctx_ context.Context,
	client_ graphql.Client,
	scene_filter *SceneFilterType,
	filterOpts *FindFilterType,
) (data_ *FindSceneIdsByFilterResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindSceneIdsByFilter",
		Query:  FindSceneIdsByFilter_Operation,
		Variables: &__FindSceneIdsByFilterInput{
			Scene_filter: scene_filter,
			FilterOpts:   filterOpts,
		},
	}

	data_ = &FindSceneIdsByFilterResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindSceneMarkers.
const FindSceneMarkers_Operation = `
query FindSceneMarkers ($scene_id: ID!) {
	findSceneMarkers(scene_marker_filter: {scenes:{value:[$scene_id],modifier:EQUALS}}) {
		scene_markers {
			... SceneMarkerParts
		}
	}
}
fragment SceneMarkerParts on SceneMarker {
	id
	seconds
	end_seconds
	title
	primary_tag {
		id
		name
	}
}
`

func FindSceneMarkers(
	ctx_ context.Context,
	client_ graphql.Client,
	scene_id string,
) (data_ *FindSceneMarkersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindSceneMarkers",
		Query:  FindSceneMarkers_Operation,
		Variables: &__FindSceneMarkersInput{
			Scene_id: scene_id,
		},
	}

	data_ = &FindSceneMarkersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindSceneTags.
const FindSceneTags_Operation = `
query FindSceneTags ($scene_id: ID!) {
	findScene(id: $scene_id) {
		... TagPartsArray
	}
}
fragment TagPartsArray on Scene {
	tags {
		... TagParts
	}
}
fragment TagParts on Tag {
	id
	name
	sort_name
	parents {
		id
		name
		sort_name
	}
}
`

func FindSceneTags(
	ctx_ context.Context,
	client_ graphql.Client,
	scene_id string,
) (data_ *FindSceneTagsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindSceneTags",
		Query:  FindSceneTags_Operation,
		Variables: &__FindSceneTagsInput{
			Scene_id: scene_id,
		},
	}

	data_ = &FindSceneTagsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindScenes.
const FindScenes_Operation = `
query FindScenes ($scene_ids: [Int!]) {
	findScenes(scene_ids: $scene_ids) {
		scenes {
			... SceneParts
		}
	}
}
fragment SceneParts on Scene {
	id
	title
	rating100
	created_at
	date
	files {
		basename
		duration
		path
		height
	}
	studio {
		name
	}
	scene_markers {
		... SceneMarkerParts
	}
	performers {
		name
	}
	groups {
		group {
			name
		}
	}
	play_count
	o_counter
	organized
	paths {
		screenshot
		preview
		stream
		funscript
		interactive_heatmap
		caption
	}
	sceneStreams {
		url
		mime_type
		label
	}
	captions {
		caption_type
		language_code
	}
	interactive
	... TagPartsArray
}
fragment SceneMarkerParts on SceneMarker {
	id
	seconds
	end_seconds
	title
	primary_tag {
		id
		name
	}
}
fragment TagPartsArray on Scene {
	tags {
		... TagParts
	}
}
fragment TagParts on Tag {
	id
	name
	sort_name
	parents {
		id
		name
		sort_name
	}
}
`

func FindScenes(
	ctx_ context.Context,
	client_ graphql.Client,
	scene_ids []int,
) (data_ *FindScenesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindScenes",
		Query:  FindScenes_Operation,
		Variables: &__FindScenesInput{
			Scene_ids: scene_ids,
		},
	}

	data_ = &FindScenesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindStudioByName.
const FindStudioByName_Operation = `
query FindStudioByName ($name: String!) {
	findStudios(studio_filter: {name:{value:$name,modifier:EQUALS}}) {
		studios {
			id
		}
	}
}
`

func FindStudioByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *FindStudioByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindStudioByName",
		Query:  FindStudioByName_Operation,
		Variables: &__FindStudioByNameInput{
			Name: name,
		},
	}

	data_ = &FindStudioByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindTagByName.
const FindTagByName_Operation = `
query FindTagByName ($name: String!) {
	findTags(tag_filter: {name:{value:$name,modifier:EQUALS}}) {
		tags {
			id
		}
	}
}
`

func FindTagByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *FindTagByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindTagByName",
		Query:  FindTagByName_Operation,
		Variables: &__FindTagByNameInput{
			Name: name,
		},
	}

	data_ = &FindTagByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by FindTags.
const FindTags_Operation = `
query FindTags ($tag_filter: TagFilterType, $sort: String, $direction: SortDirectionEnum) {
	findTags(tag_filter: $tag_filter, filter: {sort:$sort,direction:$direction,per_page:-1}) {
		tags {
			... TagParts
			scene_count
		}
	}
}
fragment TagParts on Tag {
	id
	name
	sort_name
	parents {
		id
		name
		sort_name
	}
}
`

func FindTags(
	ctx_ context.Context,
	client_ graphql.Client,
	tag_filter *TagFilterType,
	sort *string,
	direction *SortDirectionEnum,
) (data_ *FindTagsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FindTags",
		Query:  FindTags_Operation,
		Variables: &__FindTagsInput{
			Tag_filter: tag_filter,
			Sort:       sort,
			Direction:  direction,
		},
	}

	data_ = &FindTagsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by IsSceneOrganized.
const IsSceneOrganized_Operation = `
query IsSceneOrganized ($id: ID) {
	findScene(id: $id) {
		organized
	}
}
`

func IsSceneOrganized(
	ctx_ context.Context,
	client_ graphql.Client,
	id *string,
) (data_ *IsSceneOrganizedResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "IsSceneOrganized",
		Query:  IsSceneOrganized_Operation,
		Variables: &__IsSceneOrganizedInput{
			Id: id,
		},
	}

	data_ = &IsSceneOrganizedResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneAddPlayDurationSeconds.
const SceneAddPlayDurationSeconds_Operation = `
mutation SceneAddPlayDurationSeconds ($id: ID!, $seconds: Float) {
	sceneSaveActivity(id: $id, playDuration: $seconds)
}
`

func SceneAddPlayDurationSeconds(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	seconds *float64,
) (data_ *SceneAddPlayDurationSecondsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneAddPlayDurationSeconds",
		Query:  SceneAddPlayDurationSeconds_Operation,
		Variables: &__SceneAddPlayDurationSecondsInput{
			Id:      id,
			Seconds: seconds,
		},
	}

	data_ = &SceneAddPlayDurationSecondsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneDecrementO.
const SceneDecrementO_Operation = `
mutation SceneDecrementO ($id: ID!) {
	sceneDeleteO(id: $id) {
		count
	}
}
`

func SceneDecrementO(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *SceneDecrementOResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneDecrementO",
		Query:  SceneDecrementO_Operation,
		Variables: &__SceneDecrementOInput{
			Id: id,
		},
	}

	data_ = &SceneDecrementOResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneDecrementPlayCount.
const SceneDecrementPlayCount_Operation = `
mutation SceneDecrementPlayCount ($id: ID!) {
	sceneDeletePlay(id: $id) {
		count
	}
}
`

func SceneDecrementPlayCount(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *SceneDecrementPlayCountResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneDecrementPlayCount",
		Query:  SceneDecrementPlayCount_Operation,
		Variables: &__SceneDecrementPlayCountInput{
			Id: id,
		},
	}

	data_ = &SceneDecrementPlayCountResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneDestroy.
const SceneDestroy_Operation = `
mutation SceneDestroy ($id: ID!) {
	sceneDestroy(input: {id:$id,delete_file:true,delete_generated:true})
}
`

func SceneDestroy(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *SceneDestroyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneDestroy",
		Query:  SceneDestroy_Operation,
		Variables: &__SceneDestroyInput{
			Id: id,
		},
	}

	data_ = &SceneDestroyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneIncrementO.
const SceneIncrementO_Operation = `
mutation SceneIncrementO ($id: ID!) {
	sceneAddO(id: $id) {
		count
	}
}
`

func SceneIncrementO(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *SceneIncrementOResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneIncrementO",
		Query:  SceneIncrementO_Operation,
		Variables: &__SceneIncrementOInput{
			Id: id,
		},
	}

	data_ = &SceneIncrementOResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneIncrementPlayCount.
const SceneIncrementPlayCount_Operation = `
mutation SceneIncrementPlayCount ($id: ID!) {
	sceneAddPlay(id: $id) {
		count
	}
}
`

func SceneIncrementPlayCount(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *SceneIncrementPlayCountResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneIncrementPlayCount",
		Query:  SceneIncrementPlayCount_Operation,
		Variables: &__SceneIncrementPlayCountInput{
			Id: id,
		},
	}

	data_ = &SceneIncrementPlayCountResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneMarkerCreate.
const SceneMarkerCreate_Operation = `
mutation SceneMarkerCreate ($scene_id: ID!, $tag_id: ID!, $seconds: Float!, $end_seconds: Float, $title: String!) {
	sceneMarkerCreate(input: {scene_id:$scene_id,primary_tag_id:$tag_id,seconds:$seconds,end_seconds:$end_seconds,title:$title}) {
		id
	}
}
`

func SceneMarkerCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	scene_id string,
	tag_id string,
	seconds float64,
	end_seconds *float64,
	title string,
) (data_ *SceneMarkerCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneMarkerCreate",
		Query:  SceneMarkerCreate_Operation,
		Variables: &__SceneMarkerCreateInput{
			Scene_id:    scene_id,
			Tag_id:      tag_id,
			Seconds:     seconds,
			End_seconds: end_seconds,
			Title:       title,
		},
	}

	data_ = &SceneMarkerCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneMarkerUpdate.
const SceneMarkerUpdate_Operation = `
mutation SceneMarkerUpdate ($id: ID!, $tag_id: ID!, $seconds: Float!, $end_seconds: Float, $title: String!) {
	sceneMarkerUpdate(input: {id:$id,primary_tag_id:$tag_id,seconds:$seconds,end_seconds:$end_seconds,title:$title}) {
		id
	}
}
`

func SceneMarkerUpdate(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	tag_id string,
	seconds float64,
	end_seconds *float64,
	title string,
) (data_ *SceneMarkerUpdateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneMarkerUpdate",
		Query:  SceneMarkerUpdate_Operation,
		Variables: &__SceneMarkerUpdateInput{
			Id:          id,
			Tag_id:      tag_id,
			Seconds:     seconds,
			End_seconds: end_seconds,
			Title:       title,
		},
	}

	data_ = &SceneMarkerUpdateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneMarkersDestroy.
const SceneMarkersDestroy_Operation = `
mutation SceneMarkersDestroy ($ids: [ID!]!) {
	sceneMarkersDestroy(ids: $ids)
}
`

func SceneMarkersDestroy(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
) (data_ *SceneMarkersDestroyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneMarkersDestroy",
		Query:  SceneMarkersDestroy_Operation,
		Variables: &__SceneMarkersDestroyInput{
			Ids: ids,
		},
	}

	data_ = &SceneMarkersDestroyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneUpdateOrganized.
const SceneUpdateOrganized_Operation = `
mutation SceneUpdateOrganized ($id: ID!, $isOrganized: Boolean) {
	sceneUpdate(input: {id:$id,organized:$isOrganized}) {
		id
		organized
	}
}
`

func SceneUpdateOrganized(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	isOrganized *bool,
) (data_ *SceneUpdateOrganizedResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneUpdateOrganized",
		Query:  SceneUpdateOrganized_Operation,
		Variables: &__SceneUpdateOrganizedInput{
			Id:          id,
			IsOrganized: isOrganized,
		},
	}

	data_ = &SceneUpdateOrganizedResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneUpdateRating100.
const SceneUpdateRating100_Operation = `
mutation SceneUpdateRating100 ($id: ID!, $rating: Int) {
	sceneUpdate(input: {id:$id,rating100:$rating}) {
		id
	}
}
`

func SceneUpdateRating100(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	rating *int,
) (data_ *SceneUpdateRating100Response, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneUpdateRating100",
		Query:  SceneUpdateRating100_Operation,
		Variables: &__SceneUpdateRating100Input{
			Id:     id,
			Rating: rating,
		},
	}

	data_ = &SceneUpdateRating100Response{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SceneUpdateTags.
const SceneUpdateTags_Operation = `
mutation SceneUpdateTags ($id: ID!, $tag_ids: [ID!]) {
	sceneUpdate(input: {id:$id,tag_ids:$tag_ids}) {
		id
	}
}
`

func SceneUpdateTags(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	tag_ids []string,
) (data_ *SceneUpdateTagsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SceneUpdateTags",
		Query:  SceneUpdateTags_Operation,
		Variables: &__SceneUpdateTagsInput{
			Id:      id,
			Tag_ids: tag_ids,
		},
	}

	data_ = &SceneUpdateTagsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by TagCreate.
const TagCreate_Operation = `
mutation TagCreate ($name: String!) {
	tagCreate(input: {name:$name}) {
		id
	}
}
`

func TagCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *TagCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "TagCreate",
		Query:  TagCreate_Operation,
		Variables: &__TagCreateInput{
			Name: name,
		},
	}

	data_ = &TagCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by UIConfiguration.
const UIConfiguration_Operation = `
query UIConfiguration {
	configuration {
		ui
	}
}
`

func UIConfiguration(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *UIConfigurationResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UIConfiguration",
		Query:  UIConfiguration_Operation,
	}

	data_ = &UIConfigurationResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by Version.
const Version_Operation = `
query Version {
	version {
		version
	}
}
`

func Version(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *VersionResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "Version",
		Query:  Version_Operation,
	}

	data_ = &VersionResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
